namespace g = "http://oracc.org/ns/gdl/1.0"
namespace n = "http://oracc.org/ns/norm/1.0"

# copied from master gdl and adapted 

gdl.m = (word | normword | nonword)*

words = word*
word = element g:w { g_w.a , g_w.c }
g_w.a = attribute xml:id { xsd:ID }? ,
     	attribute xml:lang { xsd:language } ,
	attribute form { text } ,
    	delim?
g_w.c = (group | grapheme)*

accented = attribute g:accented { text }
delim  = attribute g:delim { text }
nongrapheme = empty
sign   = attribute g:sign  { text }
status = attribute g:status { "ok" }
utf8   = attribute g:utf8  { text }

g.meta = (accented? , delim? , sign? , status? , utf8? , linguistic.attr? , queried? )

queried = attribute g:queried  { xsd:boolean }

grapheme = v | q | s | n | c | gloss | g | punct | gsurro
form     = attribute form { text }
sb       = element g:b { s.model }
vb       = element g:b { v.model }
punct    = element g:p { p.model }
lang     = attribute xml:lang { xsd:language }
gsurro   = 
  element g:surro {
    delim? , (s|c|n|punct|group) , groupgroup
  }

# Values
v.model = text
v        = element g:v { form? , g.meta , lang? , (v.model | (vb , mods+)) }

# Names
s.model  = text

lst    = xsd:string {
  pattern="(..?SL|ABZ|BAU|HZL|KWU|LAK|M|MEA|MZL|REC|RSP|ZATU)\d+[a-z]*"
}

#[ABCD] is a stop-gap until lateuruk numbers are fixed
num      = xsd:string { pattern = "N|N\d+[ABCD]?" }

s        = element g:s { form? , g.meta , (s.model | (sb , mods+)) }

# Qualified graphemes
q        = element g:q { form? , g.meta , (v|s|c) , (s|c|n) }

# Numbers
n.model  = r , (v|s|c|q)?

r        = element g:r {
             xsd:string {
	       pattern = "[nN]\+[0-9]+|[nN]|[0-9]+|[n1-9]+/[n1-9]" } }

n        = element g:n { form? , g.meta , sexified?, n.model , mods* }
sexified = attribute sexified { text }

# Modifiers
mods     = modifier | allograph | formvar

modifier = element g:m { xsd:string { pattern = "[a-z]|[0-9]{1,3}" } }

allograph= element g:a { xsd:string { pattern = "[a-wyz0-9]+" } 
			| xsd:string { pattern = "[\+\-]" } }

formvar = element g:f { xsd:string { pattern = "[a-z0-9]+" } }

# Compounds
c.model  = (compound , (o.join , compound)+) | unary | binary | ternary | (g , mods+)

c        = element g:c { form? , g.meta , c.model , mods* }

g        = element g:g { g.meta , c.model , mods* }

compound = single | unary | binary

single   = n | s | c | (g,mods*) | q

unary    = o.unary , single

binary   = single , o.binary , single

ternary   = single , o.binary , single , o.binary , single

o.join   = element g:o { attribute g:type { "beside" | "joining" | "reordered" } }

o.unary  = element g:o { attribute g:type { "repeated" } , xsd:integer }

o.binary =
  element g:o {
    attribute g:type {
      "containing" | "above" | "crossing" | "opposing"
    }
  }

# Punctuation
p.model =
    attribute g:type { "*"|":"|":'"|':"'|":."|"::"|"|"|"/"|":r:"|"Â·" } , 
    g.meta , 
    (v|q|s|n|c)?

group = 
  element g:gg {
    attribute g:type { 
      "correction" | "alternation" | "group" | "reordering" | "ligature" | "implicit-ligature" | "logo" | "numword"
    } ,
    g.meta ,
    (group | grapheme | normseg)+
  }

groupgroup = 
  element g:gg {
    attribute g:type { "group" } ,
    g.meta ,
    (group | grapheme | normword | normseg)+
  }

normwords = normword*
normword = 
  element n:w { 
    n_w.a ,
    (gsurro | normwordword | normwordgroup | gloss | nongrapheme | group)*
  }

# restricted to (probably malformed) determinative use
n_w.c	= normword
n_w.a	= attribute xml:id { xsd:ID }? ,
     	  attribute xml:lang { xsd:language } ,
	  attribute form { text }? ,
    	  delim?

normwordgroup = 
  element n:word-group {
     attribute g:type { "alternation" } ,
     attribute g:delim { "-" }? ,
     element n:grouped-word { normwordword }+
  }

normwordword = ( text | (normseg | normgroup)+)

normseg =
  element n:s {
    n.meta ,
    g.meta ,
    text
  }

n.meta = normnum?

normnum = attribute n:num { "yes" }

normgroup = 
  element n:g {
    attribute g:type {
      "correction" | "alternation" | "group" | "reordering" | "ligature" | "numword"
    } ,
    g.meta ,
    (normgroup | normseg)+
  }

# Gloss from graphmeta.c

gloss = det | glo
pos = attribute g:pos { "pre" | "post" | "free" }
det = element g:d { pos , dtyp , surroStart? , g.meta ,
                    (g_w.c*|n_w.c)}
dtyp= attribute g:role { "phonetic" | "semantic" }
glo = element g:gloss { attribute g:type { "lang" | "text" } , surroEnd? , delim? , pos , words }

surroStart = attribute g:surroStart { "1" }
surroEnd = attribute g:surroEnd { xsd:IDREF }

linguistic.attr =
  attribute xml:lang      { xsd:language } ? ,
  (attribute g:role       { "sign" | "ideo" | "num" | "syll" }
  | (attribute g:role     { "logo" } ,
     attribute g:logolang { xsd:language }))

nonword =
  element g:nonw {
    (
    attribute xml:id { xsd:ID }? ,
    attribute xml:lang { xsd:language }? ,
    attribute type { "comment" | "dollar" | "excised" | "punct" | "surro" | "vari" }? ,
    attribute form { text }? ,
    attribute lemma { text }? ,
    delim? , g.meta ,
    (gdl.m | punct)
    )
    |
    (
    text
    )
  }
