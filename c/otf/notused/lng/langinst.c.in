#include <sys/unistd.h>
#include <ctype128.h>
#include "sas.h"
#include "fname.h"
#include "npool.h"
#include "skl.h"
#include "warning.h"
#include "charsets.h"
#include "run.h"
#include "proj_context.h"
#include "lang.h"
#include "xpd2.h"
#include "xli.h"

struct lang_context *global_lang = NULL;
struct lang_context *text_lang = NULL;
struct lang_context *curr_lang = NULL;
struct lang_context *logo_lang = NULL;

extern int verbose;

static List *langmem;

static int
find_project_csl(const char *proj,const char*lang)
{
  static char buf[128];
  sprintf(buf,"@@ORACC@@/pub/%s/csl-%s.svl",proj,lang);
  return !xaccess(buf,R_OK,0);
}

static void
load_signs(struct lang_context *lp)
{
  /* look for a project-specific signlist for the language;
     if there is one, use it: */
  if (lp->owner && lp->owner->name && find_project_csl(lp->owner->name,lp->tag->lang))
    {
#if 0
      char buf[16];
      sprintf(buf,"csl-%s",lp->tag->lang);
      lp->snames = skl_load(lp->owner->name,buf,"simple","signs");
      lp->values = skl_load(lp->owner->name,buf,"simple","values");
      if (lp->snames || lp->values)
	{
	  sprintf(buf,"%s/csl-%s",lp->owner->name,lp->tag->lang);
	  lp->signlist = (char *)npool_copy((unsigned char *)buf,
					    lp->owner->owner->pool);
	}
      if (verbose)
	{
	  const char *slstat = "failed";
	  if (lp->snames || lp->values)
	    slstat = "succeded";
	  fprintf(stderr,"project signlist for %s, lang %s load %s\n",
		  lp->owner->name, lp->tag->lang, slstat);
	}
#endif
    }
  /* if not, then if the signlist member is "#" we are using the
     built-in sign list; the signlist loader has been hacked to load
     pctc (pcsl) for script 900 */
  else if (!strcmp(lp->script,"020") || !strcmp(lp->script, "900"))
    {
#if 1
      lp->signlist = "#";
      lp->snames = lp->values = NULL;
#else
      lp->snames = skl_load(lp->owner->name,lp->signlist,"simple","signs");
      lp->values = skl_load(lp->owner->name,lp->signlist,"simple","values");
#endif
    }
  else
    {
      lp->snames = lp->values = NULL;
    }
}

static void
lang_free(struct lang_context *lp)
{
  free(lp);
}

void
lang_term(void)
{
  list_free(langmem,(list_free_func*)lang_free);
  langmem = NULL;
}

struct lang_context *
lang_load(struct proj_context *p, struct lang_tag *lt)
{
  struct lang_context *lp = calloc(1,sizeof(struct lang_context));
  struct langcore *lcp = NULL;
  struct langmode *lmp = NULL;

  if (!langmem)
    langmem = list_create(LIST_SINGLE);

  list_add(langmem, lp);

  if (!(lcp = lang_core(lt->lang,strlen(lt->lang))))
    return NULL;

  lp->tag = lt;
  lp->owner = p;
  lp->core = lcp;

  /* uscore setting not necessary if _ always means 
     language switch */
  lp->uppercase = lp->core->uppercase;
  lp->underscore = lp->core->underscore;

  if (lp->tag->script)
    {
      lmp = lang_mode(lp->tag->script,strlen(lp->tag->script));
      lp->script = lp->tag->script;
    }
  else
    {
      lmp = lang_mode(lp->core->script,strlen(lp->core->script));
      lp->script = lp->core->script;
    }

  if (lmp)
    lp->mode = lmp->mode;
  else
    lp->mode = m_alphabetic;

  /* Sumero-Akkadian Cuneiform may have its own sign list */
  if (!strcmp(lp->script, "020") || !strcmp(lp->script, "900"))
    load_signs(lp);

  lp->cset = get_charset(lp->core->code,lp->mode);
  if (lp->cset && lp->cset->keys && !lp->cset->to_uni)
    chartrie_init(lp->cset);

  return lp;
}

struct lang_context *
lang_switch(struct lang_context *curr, const char *tag, int *taglenp, 
	    const char *file, int lnum)
{
  struct lang_context *lp = NULL;
  struct lang_tag *lt = NULL;

  if (!tag)
    return NULL;

  if ((lt = langtag_create(curr, tag, taglenp, file, lnum)))
    {
      if (fwhost && !strcmp(fwhost, lt->lang))
	fwhost = NULL;
      if (!curr || strcmp(lt->tag,curr->fulltag))
	{
	  if (!(lp = lang_load(curr ? curr->owner : NULL, lt)))
	    {
	      lp = curr;
	      vwarning2(file,lnum,"%s: unknown core language in language switch",tag);
	    }
	  else
	    {
	      char *script = NULL;
	      lp->fulltag = lt->tag;
	      for (script = (char *)lp->fulltag; *script; ++script)
		{
		  if (script[0] == '-' && isdigit(script[1]))
		    break;
		}
	      if (*script && !strcmp(script+1, lp->core->script))
		*script = '\0';
	    }
	}
      else
	{
	  lp = curr;
	}
    }
  else
    lp = curr;

  return lp;
}
