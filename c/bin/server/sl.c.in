#include <string.h>
#include <stdio.h>
#include <unistd.h>
#include "ctype128.h"
#include "resolver.h"
#include "ccgi/ccgi.h"

#define SLL2	1

extern void dump_vl(CGI_varlist *vl);

static int
sl_valid_extension(const char *e)
{
  if (!e
      || !strcmp(e, "#none")
      || !strcmp(e, "compounds")
      || !strcmp(e, "contained")
      || !strcmp(e, "container")
      || !strcmp(e, "homophones")
      || !strcmp(e, "forms")
      || !strcmp(e, "h")
      || !strcmp(e, "cmemb")
      || !strcmp(e, "cinit")
      || !strcmp(e, "clast")
      || !strcmp(e, "list"))
    return 1;
  else
    return 0;
}

/* grapheme may contain letters, digits and utf-8 characters;
   we don't validate utf-8, just let the search fail if it's bad
 */
static int
sl_valid_grapheme(const char *g)
{
  if (!g)
    return 0;

  if (!strcmp(g, "#none"))
    return 1;
  
  while (*g)
    {
      if (*(unsigned char *)g < 128 && !isalnum(*g))
	return 0;
      ++g;
    }
  return 1;
}

/* TODO: the URI versions of this need to support XML/TXT formats as well as the UI return */
void
sl(char *ctext)
{
  CGI_varlist *vl = NULL;
  const char *extension = NULL, *grapheme = NULL, *caller = "uri";
  
  /* try to set extension and grapheme from component/query_string; validate grapheme if so */
#if 1
  if (ctext)
    extension = ctext;
#else
  if (c[2].text)
    extension = c[2].text;
#endif
  if (query_string && *query_string)
    grapheme = query_string;

  fprintf(stderr, "sl[1]: grapheme=%s; extension=%s\n", grapheme, extension);

  /* if not, try to set them from CGI post; validate extension/query string */
  if (!grapheme)
    {
      vl = CGI_get_post(0, NULL);
      dump_vl(vl);
      extension = CGI_lookup(vl, "ext");
      grapheme = CGI_lookup(vl, "k1");
      caller = CGI_lookup(vl, "caller");
      if (!caller)
	caller = "sl";
    }

  if (!grapheme || !*grapheme)
    grapheme = "#none";
  if (!extension || !*extension || !strcmp(extension, "sign"))
    extension = "#none";
  
  fprintf(stderr, "sl[2]: grapheme=%s; extension=%s\n", grapheme, extension);

  if (!sl_valid_extension(extension) || !sl_valid_grapheme(grapheme))
    do404();

  /* run signlist UI */
#ifdef SLL2
  fprintf(stderr, "@@ORACC_BUILDS@@/bin/slx -C %s -P %s -E %s -G %s\n", caller, project, extension, grapheme);
  execl("@@ORACC_BUILDS@@/bin/slx", "slx", "-C", caller, "-P", project, "-E", extension, "-G", grapheme, NULL);
  fprintf(stderr, "sl[3]: exec failed on @@ORACC_BUILDS@@/bin/slx -C %s -P %s -E %s -G %s\n", caller, project, extension, grapheme);
#else
  execl("/usr/bin/perl", "perl", "@@ORACC_BUILDS@@/bin/slse-slave.plx", "-caller", caller, "-project", project, "-extension", extension, "-grapheme", grapheme, NULL);
#endif
}
