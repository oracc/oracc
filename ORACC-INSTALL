Before lnx-config:

Install TeX-Live basic+xetex package; add path to installing user's .profile; . ~/.profile

Inside lnx-config: add (cd c/bin/rnv ; make ; sudo make install)

install java

need to do oscs install including

     /usr/local/tmp/sop chown apache:apache /usr/local/tmp/sop

need to install usermode.xml

need to creat $ORACC/sbin


Operating System Setup
======================

For CentOS 6:
-------------

On CentOS 6 if the machine is only for Oracc you can just do a minimal
install then:

	./pkg-centos6-minimal.sh

Ensure that the user who is installing has sudo permission:

	sudo -v

If you are told "Sorry, user stinney may not run sudo on oracc" or the
like, either ask your system administrator to give the oracc user sudo
permissions or set them for yourself if you are allowed to:

	visudo
	/^root
	i
	[go to end of line and press return]
	stinney	ALL(ALL)	ALL
	:w
	:q

Note: installing as the oracc user is not recommended.  You should
also set the oracc user's login shell to /sbin/nologin (the script to
create the oracc user does this for you).  To perform any needed
admin as oracc you can still do:

	su - oracc -s /bin/bash

For Mac OS X:
-------------

First install XCode, then install Macports for your version from macports.org.

Now run the pkg installer (note: this is untested with OS X 10.7):

	./pkg-mac-osx.sh

Ensure that the user who is installing has maintainer privileges.


Obtaining Oracc
===============

Change directory to the location where you want the Oracc repository and do:

	git clone https://github.com/oracc/oracc.git

This creates a repo 'oracc'.  Change directory to the repo with `cd oracc'.


Oracc user creation and initial setup
=====================================

Linux
-----

Run

	./oracc-user.sh 

and follow the prompts.


Mac OS X
--------

Create a user 'oracc' from System->Preferences->Users.  Do not give this user Maintainer
privileges.


Edit oraccenv.sh following the documentation of the Environment at the end of this file.


Set the environment
===================

First check that the hostname is set properly for the machine--this is particularly
an issue if the DNS for the box was not set up at install-time.  Use

	sudo hostname HOSTNAME_FOR_THE_SERVER

if necessary.  You may also need to add an IP to hostname mapping to your /etc/hosts, e.g.

	192.168.1.13	oracc.home

Then set up the environment using oraccenv.sh:

	. oraccenv.sh

Review the environment settings with:

	printenv | grep ORACC

and correct as necessary in oraccenv.sh then re-run it and check again.


Configure and Install Oracc
===========================

	sudo ./preconfig.sh
	./lnx-config.sh or ./mac-config.sh
	sudo ./makeinstall.sh

(if you want to build with debugging info, run ./lnx-config.sh CFLAGS=-g)


Configure Apache for Oracc
==========================

Review the file oracc-vhost.conf which was created during the configuration process.  When
it meets your server's requirements type:

	sudo ./install-oracc-vhost-conf.sh

If you are reinstalling and get the message 'oracc-vhost is already in httpd.conf' you can
either clean up the old installation by rolling back the config files or say:

	sudo ./install-oracc-vhost-conf.sh force

Linux:
------

Firewall
........

Check that your iptables accept tcp port 80 using 

	sudo iptables -L -n

If you *don't* see something like:

	ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:80 

then you need to add access to port 80.  On CentOS/RedHat this is best done with

	sudo system-config-firewall

It can also be done manually with:

	/sbin/iptables -A INPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT

but this is not recommended as it can be tricky to get the rules in the correct order.

Also now: enable 8085 for tcp to support oscs. And add ${ORACC}/sbin/oscs -s to etc/rc.d/rc.local

********
	
Autostart
.........

The Oracc installation process should automatically add `apachectl
start' to /etc/rc.d/rc.local -- if you are not on a RedHat/CentOS
system you may need to do something other than this.


Mac OS X:
---------

This was easy up until Mountain Lion.  See this page for notes and a
link to a page that makes it easy again:

        http://osxdaily.com/2012/09/02/start-apache-web-server-mac-os-x/

Oracc Environment Variables
===========================

Oracc has several environment variables which must be set at install time:

* ORACC

  The location of installed Oracc software, default = /home/oracc

* ORACC_MODE

  The user-mode of the installation, either 'single', i.e., one user, or
  'multi', i.e., multiple users.

  In 'single' mode, there is no user 'oracc' (unless that is the single
  user).  In 'multi' mode there must be a system user 'oracc'.

* ORACC_HOME

  The location of Oracc projects.  In a 'multi' installation this is 
  /home on Unix or /Users on Mac.  In a 'single' installation this may
  be either /usr/local/oracc or any other directory that the Oracc
  installation has access to.  If the 'single' installation is on a
  personal computer, ~/oracc-projects is the default location

* ORACC_USER

  This is 'yes' if there is a system user named oracc, no otherwise. An
  oracc user is required for multi mode but is optional otherwise.

* ORACC_HOST

  This should be the full domain name of the Oracc server on which the
  instance is running.

UBUNTU APACHE2
==============

cd /etc/apache2/mods-enabled
ln -sf ../mods-available/cgi.load .
ln -sf ../mods-available/rewrite.load .
# install oracc-vhost.conf in /etc/apache2/sites-available
cd /etc/apache2/sites-available
rm -f 000-default.conf # or whatever it's called
ln -sf ../sites-available/oracc-vhost.conf .

MAKE SURE osc-install.sh USES NEW httpduser.sh TO SET osc-server PERMS

