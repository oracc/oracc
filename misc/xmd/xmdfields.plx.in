#!/usr/bin/perl
use warnings; use strict; use open ':utf8';
binmode STDIN, ':utf8'; binmode STDOUT, ':utf8'; binmode STDERR, ':utf8';
binmode $DB::OUT, ':utf8' if $DB::OUT;
use lib '@@ORACC@@/lib';
use ORACC::XMD::Fields;
use ORACC::Expand2;
use Getopt::Long;
my $bare = 0; # give bare field data, no prepended id_text and no field names row
my $fields = 0; # use -fields to output field names in row 1
my $project = '';
my $verbose = 0;
my @default_fields = qw/designation provenience museum_no excavation_no accession_no primary_publication publication_history genre subgenre period/;

GetOptions(
    'bare'=>\$bare,
    'fields'=>\$fields,
    'project:s'=>\$project,
    'verbose'=>\$verbose,
    );
my @fields = @ARGV; @fields = @default_fields unless $#fields >= 0;

@ARGV = ();
unless ($project) {
    $project = `oraccopt` if -r '02xml/config.xml';
}
warn "$0: working in $project\n" if $verbose;

if ($fields) {
    print "id_text\t" unless $bare;
    print join("\t", @fields), "\n";
}
while (<>) {
    chomp;
    $project = $1 if s/^(.*?)://;
    my $fields = ORACC::XMD::Fields::get_in_project($project,$_);
    warn "$0: working on $_\n" if $verbose;
    my @values = ();
    push @values, $_ unless $bare;
    foreach my $f (@fields) {
	my $value = '';
	foreach my $ff (split(/\|/,$f)) {
	    $value = $$fields{$ff} and last if $$fields{$ff};
	}
	push @values, $value;
    }
    print join("\t", @values), "\n";
    ORACC::XMD::Fields::drop_in_project($project,$_);
}
1;
