<?xml version='1.0' encoding='utf-8'?>

<xsl:stylesheet version="1.0" 
  xmlns:g="http://oracc.org/ns/gdl/1.0"
  xmlns:xtf="http://oracc.org/ns/xtf/1.0"
  xmlns:xcl="http://oracc.org/ns/xcl/1.0"
  xmlns:xff="http://oracc.org/ns/xff/1.0"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:norm="http://oracc.org/ns/norm/1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xl="http://www.w3.org/1999/xlink"
  exclude-result-prefixes="g norm xcl xff xtf xl">

<xsl:output method="xml" indent="yes" encoding="utf-8"/>

<xsl:include href="xpd.xsl"/>
<xsl:include href="g2-gdl-render-g.xsl"/>

<xsl:param name="render-mister" select="'yes'"/>

<xsl:variable name="config-file" select="concat('@@ORACC@@/xml/',$project,'/config.xml')"/>

<xsl:param name="render-accents">
  <xsl:call-template name="xpd-option">
    <xsl:with-param name="config-xml" select="$config-file"/>
    <xsl:with-param name="option" select="'render-accents'"/>
  </xsl:call-template>
</xsl:param>

<xsl:param name="render-inter-det-char">
  <xsl:call-template name="xpd-option">
    <xsl:with-param name="config-xml" select="$config-file"/>
    <xsl:with-param name="option" select="'render-inter-det-char'"/>
    <xsl:with-param name="default" select="''"/>
  </xsl:call-template>
</xsl:param>

<xsl:variable name="word-absent-char" select="'&#x2014;'"/>
<xsl:variable name="word-broken-char" select="'&#x2014;'"/>
<xsl:variable name="word-linefrom-char" select="'&#x2190;'"/>
<xsl:variable name="word-linecont-char" select="'&#x2192;'"/>

<xsl:key name="lnodes" match="xcl:l" use="@ref"/>
<xsl:key name="xnodes" match="xcl:link" use="substring(@xl:href,2)"/>

<xsl:template match="g:w">
  <xsl:param name="allow-space" select="not(@headform)"/>
  <xsl:param name="proofing-mode" select="false()"/>
  <xsl:param name="noq" select="false()"/>
  <xsl:call-template name="gdl-w">
    <xsl:with-param name="allow-space" select="$allow-space"/>
    <xsl:with-param name="proofing-mode" select="$proofing-mode"/>
    <xsl:with-param name="noq" select="$noq"/>
  </xsl:call-template>
  <xsl:if test="@headform"><xsl:text>-</xsl:text></xsl:if>
</xsl:template>

<xsl:template match="g:swc">
  <xsl:text>-</xsl:text>
  <xsl:choose>
    <xsl:when test="@swc-final = '0'">
      <xsl:call-template name="gdl-w">
	<xsl:with-param name="allow-space" select="false()"/>
      </xsl:call-template>
      <xsl:text>-</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="gdl-w">
	<xsl:with-param name="allow-space" select="true()"/>
      </xsl:call-template>      
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="g:v|norm:s">
  <xsl:call-template name="render-o"/>
  <xsl:variable name="lang">
    <xsl:call-template name="set-lang"/>
  </xsl:variable>
  <xsl:choose>
    <xsl:when test="ancestor::g:d"
       >\up{<xsl:if test="ancestor::g:d[@g:role='phonetic']"
            >\<xsl:value-of select="$lang"/><xsl:text> </xsl:text>
	  </xsl:if
	  ><xsl:call-template name="render-g"
	  /><xsl:call-template name="render-flags"
          /><xsl:value-of select="@g:delim"
    />}</xsl:when>
    <xsl:when test="self::norm:s">{\r<xsl:text> </xsl:text
      ><xsl:choose>
	<xsl:when test="@norm:num='yes'">\r</xsl:when>
	<xsl:otherwise
	    ><xsl:if test="string-length($lang)>0">b\<xsl:value-of select="$lang"
	/></xsl:if></xsl:otherwise
      ></xsl:choose>
      <xsl:call-template name="render-g"/>
      <xsl:call-template name="render-flags"/>
      }
    </xsl:when>
    <xsl:otherwise
	><xsl:if test="string-length($lang)>0">{\<xsl:value-of select="$lang"
	/><xsl:text> </xsl:text></xsl:if><xsl:call-template name="render-g"
	/>}<xsl:call-template name="render-flags"
    /></xsl:otherwise>
  </xsl:choose>
  <xsl:call-template name="render-c"/>
</xsl:template>

<xsl:template match="g:s">
  <xsl:if test="ancestor::g:d/@g:pos = 'post'">.</xsl:if
  ><xsl:call-template name="render-o"
  /><xsl:choose
    ><xsl:when test="ancestor::g:d and ancestor::g:q">\up{<xsl:apply-templates
          /><xsl:call-template name="render-flags"
	  /><xsl:value-of select="@g:delim"/>}</xsl:when
    ><xsl:otherwise>{\gdlsign <xsl:call-template name="render-g"
               />}<xsl:call-template name="render-flags"
    /></xsl:otherwise>
  </xsl:choose><xsl:call-template name="render-c"
  /><xsl:if test="not(ancestor::g:q) and ancestor::g:d 
		and not(ancestor::g:d/@g:pos = 'post')">.</xsl:if
		></xsl:template>

<xsl:template match="g:d">
  <xsl:call-template name="render-o"/>
  <xsl:for-each select="*">
    <xsl:apply-templates select="."/>
  </xsl:for-each>
  <xsl:call-template name="render-flags"/>
  <xsl:call-template name="render-c"/>
</xsl:template>

<xsl:template match="g:r">
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="g:x">
  <xsl:choose>
    <xsl:when test="@g:type = 'newline'">
      <xsl:choose>
	<xsl:when test="preceding-sibling::g:w">
	  <xsl:text>&#xa0;; </xsl:text>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:text>;</xsl:text>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:when>
    <xsl:when test="@g:type = 'disamb'">
      <xsl:value-of select="text()"/>
    </xsl:when>
    <xsl:otherwise>
      <span class="r">
	<xsl:value-of select="@g:o"/>
	<xsl:choose>
	  <xsl:when test="@g:type='word-absent'">
	    <xsl:value-of select="$word-absent-char"/>
	  </xsl:when>
	  <xsl:when test="@g:type='word-broken'">
	    <xsl:value-of select="$word-broken-char"/>
	  </xsl:when>
	  <xsl:when test="@g:type='word-linecont'">
	    <xsl:value-of select="$word-linecont-char"/>
	  </xsl:when>
	  <xsl:when test="@g:type='word-linefrom'">
	    <xsl:value-of select="$word-linefrom-char"/>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:value-of select="text()"/>
	  </xsl:otherwise>
	</xsl:choose>
	<xsl:value-of select="@g:c"/>
      </span>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="g:b">
  <xsl:choose>
    <xsl:when test="g:o">(<xsl:apply-templates/>)</xsl:when>
    <xsl:otherwise><xsl:apply-templates/></xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="g:p">
  <xsl:call-template name="render-o"/>
  <xsl:value-of select="@g:type"/>
  <xsl:if test="*">(<xsl:apply-templates/>)</xsl:if>
  <xsl:call-template name="render-flags"/>
  <xsl:call-template name="render-c"/>
  <xsl:text> </xsl:text>
</xsl:template>

<xsl:template match="g:q">
  <xsl:param name="noq" select="false()"/>
  <xsl:call-template name="render-o"/>
  <xsl:apply-templates select="*[1]"/>
  <xsl:choose>
    <xsl:when test="$noq"/>
    <xsl:otherwise>
      <xsl:choose>
	<xsl:when test="ancestor::g:d"><sup>(</sup></xsl:when>
	<xsl:otherwise>(</xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*[2]"/>
      <xsl:choose>
	<xsl:when test="ancestor::g:d"><sup>)</sup></xsl:when>
	<xsl:otherwise>)</xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
  <xsl:call-template name="render-flags"/>
  <xsl:call-template name="render-c"/>
</xsl:template>

<xsl:template match="g:a">
  <xsl:choose>
    <xsl:when test="ancestor-or-self::*[@xml:lang][1]/@xml:lang='qpc'">\up{<xsl:apply-templates/>}</xsl:when>
    <xsl:otherwise>\up{<xsl:value-of select="text()"/>}</xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="g:f"/>

<xsl:template match="g:m">\up{<xsl:value-of select="text()"/>}</xsl:template>

<xsl:template match="g:n">
  <xsl:call-template name="render-o"/>
  <xsl:choose>
    <xsl:when test="ancestor::g:d">
      <sup>
	<xsl:if test="ancestor::g:d[@g:role='phonetic']">
	  <xsl:attribute name="class">
	    <xsl:call-template name="set-lang"/>
	  </xsl:attribute>
	</xsl:if>
	<xsl:choose>
	  <xsl:when test="g:r = '1' and $render-mister = 'yes'
			  and (count(*) = 1 or *[2] = 'diš')">
	    <xsl:text>m</xsl:text>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:call-template name="render-n"/>
	  </xsl:otherwise>
	</xsl:choose>
	<xsl:apply-templates select="g:a|g:m"/>
	<xsl:call-template name="render-flags"/>
	<xsl:value-of select="@g:delim"/>
      </sup>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="render-n"/>
      <xsl:apply-templates select="g:a|g:m"/>
      <xsl:call-template name="render-flags"/>
    </xsl:otherwise>
  </xsl:choose>
  <xsl:call-template name="render-c"/>
</xsl:template>

<xsl:template name="render-n">
  <xsl:choose>
    <xsl:when test="g:b">
      <xsl:for-each select="g:b">
        <xsl:apply-templates select="g:r"/>
        <xsl:text>(</xsl:text>
        <xsl:apply-templates select="*[2]"/>
	<xsl:apply-templates select="g:a|g:m"/>
        <xsl:text>)</xsl:text>
      </xsl:for-each>
     </xsl:when>
    <xsl:otherwise>
      <xsl:apply-templates select="g:r"/>
      <xsl:if test="count(*[not(self::g:m) and not(self::g:a)])>1">
	<xsl:text>(</xsl:text>
	<xsl:apply-templates select="*[2]"/>
	<xsl:text>)</xsl:text>
      </xsl:if>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="g:c"
  ><xsl:call-template name="render-o"/>{\gdlcompound <xsl:apply-templates
  />}<xsl:call-template name="render-flags"
  /><xsl:call-template name="render-c"
/></xsl:template>

<xsl:template match="g:g">
  <xsl:choose>
    <xsl:when test="g:b">
      <xsl:apply-templates/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>(</xsl:text>
      <xsl:apply-templates/>
      <xsl:text>)</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="g:o">
  <xsl:choose>
    <xsl:when test="@g:type='beside'"><xsl:text>.</xsl:text></xsl:when
    ><xsl:when test="@g:type='joining'"><xsl:text>+</xsl:text></xsl:when
    ><xsl:when test="@g:type='containing'"><xsl:text>×</xsl:text></xsl:when
    ><xsl:when test="@g:type='above'"><xsl:text>\&amp;</xsl:text></xsl:when
    ><xsl:when test="@g:type='crossing'"><xsl:text>\%</xsl:text></xsl:when
    ><xsl:when test="@g:type='opposing'"><xsl:text>@</xsl:text></xsl:when
    ><xsl:when test="@g:type='reordered'"><xsl:text>:</xsl:text></xsl:when
    ><xsl:when test="@g:type='repeated'"
      ><xsl:value-of select="concat(.,'x')"
    /></xsl:when
    ><xsl:otherwise
      ><xsl:message>gdl-TeX: operator <xsl:value-of select="@g:type"/> not handled</xsl:message
    ></xsl:otherwise
  ></xsl:choose>
</xsl:template>

<xsl:template match="g:gg">
  <xsl:choose>
    <xsl:when test="@g:type='correction'">
      <xsl:apply-templates select="*[1]"/>
      <xsl:text>(</xsl:text>
	<xsl:for-each select="*[position()>1]">
	  <xsl:apply-templates select="."/>
	  <xsl:if test="not(position()=last())">
	    <xsl:text>-</xsl:text>
          </xsl:if>
 	</xsl:for-each>
      <xsl:text>)</xsl:text>
    </xsl:when>
    <xsl:when test="@g:type='alternation'">
      <xsl:for-each select="*">
	<xsl:apply-templates select="."/>
	<xsl:if test="not(position()=last())">
	  <xsl:text>/</xsl:text>
        </xsl:if>
      </xsl:for-each>
    </xsl:when>
    <xsl:when test="@g:type='ligature'">
      <xsl:for-each select="*">
	<xsl:apply-templates select="."/>
	<xsl:if test="not(position()=last())">
	  <xsl:choose>
	    <xsl:when test="text()='x'">
	      <xsl:choose>
		<xsl:when test="following-sibling::*[1][self::g:d]"/>
		<xsl:otherwise>
		  <xsl:text> </xsl:text>
		</xsl:otherwise>
	      </xsl:choose>
	    </xsl:when>
	    <xsl:otherwise>
	      <xsl:text>+</xsl:text>
	    </xsl:otherwise>
	  </xsl:choose>
        </xsl:if>
      </xsl:for-each>
    </xsl:when>
    <xsl:when test="@g:type='group' or @g:type='logo'">
      <xsl:variable name="boundary">
	<xsl:choose>
	  <xsl:when test="g:s|g:c|g:n">
	    <xsl:text>.</xsl:text>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:text>-</xsl:text>
	  </xsl:otherwise>
	</xsl:choose>
      </xsl:variable>
      <xsl:for-each select="*">
	<xsl:apply-templates select="."/>
	<xsl:choose>
	  <xsl:when test="self::g:d[@g:pos='pre']
			  or following-sibling::*[1][self::g:d[@g:pos='post']]"/>
	  <xsl:otherwise>
	    <xsl:if test="not(position()=last())">
	      <xsl:value-of select="$boundary"/>
	    </xsl:if>
	  </xsl:otherwise>
	</xsl:choose>
      </xsl:for-each>
    </xsl:when>
    <xsl:when test="@g:type='reordering'">
      <xsl:for-each select="*">
	<xsl:apply-templates select="."/>
	<xsl:if test="not(position()=last())">
	  <xsl:text>:</xsl:text>
        </xsl:if>
      </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <xsl:message>gdl-TeX: group type <xsl:value-of select="@g:type"/> not handled</xsl:message>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="g:surro">
  <xsl:apply-templates select="*[1]"/>
  <xsl:text>&lt;(</xsl:text>
  <xsl:apply-templates select="*[2]"/>
  <xsl:text>)></xsl:text>
</xsl:template>

<xsl:template match="g:nonw">
  <xsl:choose>
    <xsl:when test="@type='vari'">
      \varmark{<xsl:value-of select="concat('(:',.,':)')"/>}%
    </xsl:when>
    <xsl:when test="contains(.,'_')">
      <xsl:value-of select="translate(.,'_','&#xa0;')"/>
    </xsl:when>
    <xsl:when test="../self::xtf:surro or ../self::g:gsurro">
      <xsl:apply-templates/>
    </xsl:when>
    <xsl:when test="@type='punct' or @type='excised'">
      <xsl:apply-templates/>
      <xsl:text> </xsl:text>
    </xsl:when>
    <xsl:when test="@type='comment'"/>
    <xsl:when test="starts-with(g:x/@g:type,'word-')">
      <xsl:apply-templates/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text> (</xsl:text>
      <xsl:apply-templates/>
      <xsl:text>) </xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<!-- Hacks to work around either JS escaping or JS quoting issues -->
<xsl:variable name="quote"><xsl:text>+'d\</xsl:text></xsl:variable>
<xsl:variable name="acute" select="'&#x00B1;&#x00B4;&#x20E5;'"/>

<xsl:template name="render-g-text">
  <xsl:param name="t"/>
  <xsl:value-of select="$t"/>
</xsl:template>

<xsl:template name="render-flags">
  <xsl:if test="@g:collated
		or @g:queried
		or @g:remarked"
    >\up{\sux<xsl:if test="@g:collated">*</xsl:if
       ><xsl:if test="@g:remarked">!</xsl:if
       ><xsl:if test="@g:queried">?</xsl:if
    >}</xsl:if>
</xsl:template>

<xsl:template name="render-o">
  <xsl:if test="@g:varo">
    \varmark{<xsl:value-of select="concat('(',@g:varo,':')"/>}%
  </xsl:if>
  <xsl:value-of select="@g:o"/>
  <xsl:if test="@g:ho">
    <xsl:text>&#x2e22;</xsl:text>
  </xsl:if>
</xsl:template>

<xsl:template name="render-c">
  <xsl:if test="@g:hc">
    <xsl:text>&#x2e23;</xsl:text>
  </xsl:if>
  <xsl:value-of select="@g:c"/>
  <xsl:if test="@g:varc">
    \varmark{<xsl:value-of select="concat(':',@g:varc,')')"/>}%
  </xsl:if>
</xsl:template>

<xsl:template name="gdl-w">
  <xsl:param name="allow-space" select="true()"/>
  <xsl:param name="noq" select="false()"/>
  <xsl:variable name="lang">
    <xsl:call-template name="set-lang"/>
  </xsl:variable>
  <xsl:call-template name="gdl-w-span">
    <xsl:with-param name="noq" select="$noq"/>
  </xsl:call-template>
  <xsl:if test="$allow-space and following-sibling::*">
    <xsl:text> </xsl:text>
  </xsl:if>
</xsl:template>

<!-- N.B.: just the lang as output here, no formatting codes -->
<xsl:template name="set-lang">
  <xsl:variable name="xml-lang">
    <xsl:value-of select="ancestor-or-self::*[@xml:lang][1]/@xml:lang"/>
  </xsl:variable>
  <xsl:choose>
    <xsl:when test="contains($xml-lang,'-')"><xsl:value-of select="substring-before($xml-lang,'-')"/></xsl:when>
    <xsl:otherwise><xsl:value-of select="$xml-lang"/></xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="gdl-w-span">
  <xsl:param name="noq" select="false()"/>
  <xsl:choose>
    <xsl:when test="self::norm:w">
      <xsl:call-template name="render-o"/>
      <xsl:apply-templates/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="render-word">
	<xsl:with-param name="noq" select="$noq"/>
      </xsl:call-template>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="render-word">
  <xsl:param name="noq" select="false()"/>
  <xsl:for-each select="*">
    <xsl:apply-templates select=".">
      <xsl:with-param name="noq" select="$noq"/>
    </xsl:apply-templates>
    <xsl:if test="@notemark">
      <xsl:call-template name="process-notes"/>
    </xsl:if>
    <xsl:choose>
      <xsl:when test="self::g:d and following-sibling::*[1][self::g:d]">
	<xsl:value-of select="render-inter-det-char"/>
	<!--<xsl:text>&#xa0;</xsl:text>-->
      </xsl:when>
      <xsl:otherwise>
	<xsl:call-template name="maybe-hyphen"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:for-each>
</xsl:template>

<xsl:template name="maybe-hyphen">
  <xsl:variable name="hyph">
    <xsl:choose>
      <xsl:when test="@g:em">—</xsl:when>
      <xsl:otherwise>-</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <xsl:choose>
    <xsl:when test="self::g:d">
      <xsl:if test="@g:pos='post' and not(position()=last())
		    and not(following-sibling::*[1][@g:type='disamb'])">
	<xsl:value-of select="$hyph"
      /></xsl:if>
    </xsl:when>
    <xsl:when test="following-sibling::*[1][self::g:d]">
      <xsl:if test="following-sibling::*[1][@g:pos='pre']">
	<xsl:value-of select="$hyph"
      /></xsl:if>
    </xsl:when>
    <xsl:when test="@gloss='cont' 
		    or (@gloss='post' and following::xtf:g[1]/@gloss='cont')"/>
    <xsl:otherwise>
      <xsl:if test="not(position() = last())
		and not(@gloss = 'pre')
	        and not(following-sibling::xtf:g[1]/@gloss='post')
	        and not(following-sibling::*[1][local-name()='gloss'])
	        and not(following-sibling::*[1][@g:type='disamb'])
	        and not(../following-sibling::xtf:g[1]/@gloss='post')
	        and not(../following-sibling::*[1][local-name()='gloss']
	        and not(../following-sibling::*[1][@g:type='disamb'])
		)
		"><xsl:value-of select="$hyph"
      /></xsl:if>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="process-notes"/>

<xsl:template match="g:*">
  <xsl:message>gdl-HTML: <xsl:value-of select="name()"/> not handled</xsl:message>
  <xsl:apply-templates/>
</xsl:template>

</xsl:stylesheet>
