<xsl:stylesheet version="1.0" 
		xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:gdl="http://oracc.org/ns/gdl/1.0"
		xmlns:norm="http://oracc.org/ns/norm/1.0"
		xmlns:nsa="http://oracc.org/ns/nsa/1.0"
		xmlns:xcl="http://oracc.org/ns/xcl/1.0"
		xmlns:xmd="http://oracc.org/ns/xmd/1.0"
		xmlns:xff="http://oracc.org/ns/xff/1.0"
		xmlns:xl="http://www.w3.org/1999/xlink"
		xmlns:xtf="http://oracc.org/ns/xtf/1.0"
		xmlns:tei="http://www.tei-c.org/ns/1.0"
		xmlns="http://www.tei-c.org/ns/1.0"
		exclude-result-prefixes="gdl nsa xcl xff xl xtf"
		>

<!-- @SUMMARY@= Performs heavy lifting of XTF to TEI text transformations. -->

<xsl:param name="version" select="'1.1'"/>
<xsl:param name="tei-hdr-type" select="'basic'"/>
<xsl:param name="project"/>
<xsl:param name="this-project"/>

<xsl:variable name="teiDir" 
	      select="concat('@@ORACC@@/',$this-project,'/02xml/00tei')"/>
<xsl:variable name="hdrDir" 
	      select="concat('@@ORACC@@/',$this-project,'/01tmp/teihdrs')"/>
<xsl:variable name="xtrDir" 
	      select="concat('@@ORACC@@/',$this-project,'/01tmp/teixtr')"/>

<xsl:variable name="listNym" 
	      select="concat($teiDir, '/01listNym.xml')"/>

<xsl:output method="xml" indent="yes" encoding="utf-8"/>

<xsl:key name="pn-cfs" match="xff:f[@pos='PN']" use="@cf"/>
<xsl:key name="pn-forms" match="xff:f[@pos='PN']" use="@form"/>
<xsl:key name="statusEnd" match="*[@gdl:statusEnd]" use="@gdl:statusEnd"/>

<xsl:key name="nym-orths" match="tei:orth" use="text()"/>

<xsl:template match="/xtf:xtf">
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="/xmd:xmd">
  <xsl:call-template name="tei-handler">
    <xsl:with-param name="root-node" select="."/>
  </xsl:call-template>
</xsl:template>

<xsl:template match="xcl:xcl">
  <xsl:for-each select="xcl:c">
    <xsl:variable name="body-node" select="*[@subtype='body']"/>
    <xsl:if test="count($body-node/preceding-sibling::xcl:c) > 0">
      <front>
	<xsl:for-each select="$body-node/preceding-sibling::xcl:c">
	  <div1 type="discourse" subtype="{@subtype}">
	    <p>
	      <xsl:apply-templates/>
	    </p>
	  </div1>
	</xsl:for-each>
      </front>
    </xsl:if>
    <body>
      <div1 type="discourse" subtype="body">
	<p>
	  <xsl:apply-templates select="*[@subtype='body']/*"/>
	</p>
      </div1>
      <xsl:copy-of select="document(concat($xtrDir, '/', /*/@xml:id,'-xtr.xml'))/*/*"/>
    </body>
    <xsl:if test="count($body-node/following-sibling::*) > 0">
      <back>
	<xsl:for-each select="$body-node/following-sibling::*">
	  <div1 type="discourse" subtype="{@subtype}">
	    <p>
	      <xsl:apply-templates/>
	    </p>
	  </div1>
	</xsl:for-each>
      </back>
    </xsl:if>
  </xsl:for-each>
</xsl:template>

<xsl:template match="xcl:mds|xcl:linkbase"/>

<xsl:template name="tei-handler">
  <xsl:param name="corpus" select="@project"/>
  <xsl:param name="datestamp" 
	     select="document('/datestamp')/*"/>
  <xsl:param name="source" select="concat(@project,'/',@xml:id,'.xtf')"/>
  <xsl:param name="root-node"/>
  <xsl:processing-instruction name="xml-stylesheet"
   >href="/css/xtf2tei.css" type="text/css"</xsl:processing-instruction>
  <xsl:text>&#xa;</xsl:text>
  <TEI>
    <xsl:choose>
      <xsl:when test="$tei-hdr-type = 'full'">
	<xsl:copy-of select="document(concat($hdrDir, '/', @xml:id,'-hdr.xml'))/*"/>
      </xsl:when>
      <xsl:otherwise>
	<teiHeader>
	  <fileDesc>
	    <titleStmt>
	      <title>
		<note type="helplink" 
		      xl:type="simple" 
		      xl:href="/doc/user/teicolours.html" 
		      xl:show="new">(A key to the colourization may be found at: 
		/doc/user/teicolours.html.)</note>
		<name xl:type="simple" xl:href="https://cdli.mpiwg-berlin.mpg.de/{@xml:id}" 
		      xl:show="new" type="cdlicat:id_text"><xsl:value-of select="@xml:id"/></name>
		<xsl:text> = </xsl:text>
		<name type="cdlicat:primary_publication"><xsl:value-of select="@n"/></name>
	      </title>
	      <respStmt>
		<resp>generated at <date><xsl:value-of select="$datestamp"/></date> by </resp>
		<name type="program">xtf2tei.xsl 1.1</name>
	      </respStmt>
	    </titleStmt>
	    <publicationStmt>
	      <availability><p>Electronic manuscript</p></availability>
	    </publicationStmt>
	    <sourceDesc>
	      <bibl><name type="file"><xsl:value-of select="$source"/></name></bibl>
	    </sourceDesc>
	  </fileDesc>
	</teiHeader>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:choose>
      <xsl:when test="local-name($root-node) = 'atf'">
	<text type="transliteration" subtype="{local-name(/*)}">
	  <body><p><xsl:apply-templates select="$root-node/text()"/></p></body>
	</text>
      </xsl:when>
      <xsl:when test="local-name($root-node) = 'xmd'">
	<text>
	  <body><p>No text edition available.</p></body>
	</text>
      </xsl:when>
      <xsl:otherwise>
	<text xml:lang="{@xml:lang}" type="transliteration" subtype="{local-name(/*)}">
	  <xsl:apply-templates select="$root-node"/>
	</text>
      </xsl:otherwise>
    </xsl:choose>
  </TEI>
</xsl:template>

<xsl:template match="xtf:transliteration|xtf:composite">
  <xsl:call-template name="tei-handler">
    <xsl:with-param name="root-node" select="xcl:xcl"/>
  </xsl:call-template>
</xsl:template>

<xsl:template match="xcl:c">
  <xsl:choose>
    <xsl:when test="@type='sentence'">
      <s xml:lang="{ancestor-or-self::*[@xml:lang]/@xml:lang}">
	<xsl:attribute name="xml:id">
	  <xsl:value-of select="@xml:id"></xsl:value-of>
	</xsl:attribute>
	<xsl:text>&#xa;</xsl:text>
	<xsl:apply-templates/>
      </s>
    </xsl:when>
    <xsl:when test="@tag='person-co-spec'">
      <persName>
	<xsl:text>&#xa;</xsl:text>
        <xsl:apply-templates mode="person"/>
      </persName><xsl:text>&#xa;</xsl:text>
    </xsl:when>
    <xsl:when test="@tag='person-group'">
<!--      <persGroup> -->
	<xsl:text>&#xa;</xsl:text>
        <xsl:apply-templates mode="person"/>
<!--      </persGroup><xsl:text>&#xa;</xsl:text> -->
    </xsl:when>
    <xsl:when test="@tag='person-spec'">
      <xsl:variable name="sex">
	<xsl:choose>
	  <xsl:when test="xcl:c">
	    <xsl:value-of select="*/xcl:l[last()]/xcl:props/*[@name='gender']/@value"/>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:value-of select="xcl:l[1]/xcl:props/*[@name='gender']/@value"/>
	  </xsl:otherwise>
	</xsl:choose>
      </xsl:variable>
      <xsl:variable name="co-value" select="preceding-sibling::*[1][self::xcl:l]
					    /xcl:props/*[@name='relator']/@value"/>
      <xsl:variable name="co-type">
	<xsl:choose>
	  <xsl:when test="$co-value = 'h'">
	    <xsl:text>gamonymic</xsl:text>
	  </xsl:when>
	  <xsl:when test="$co-value = 'v'">
	    <!--<xsl:text>fratronym</xsl:text>-->
	  </xsl:when>
	  <xsl:when test="string-length($co-value)>0">
	    <xsl:message><xsl:value-of select="/*/@project"/>:<xsl:value-of select="/*/@xml:id"/>: unhandled person-co-spec type with value '<xsl:value-of select="$co-value"/>'</xsl:message>
	  </xsl:when>
	  <xsl:otherwise>
	  </xsl:otherwise>
	</xsl:choose>
      </xsl:variable>
      <xsl:choose>
	<xsl:when test="parent::xcl:c[@subtype='person-co-spec']
			and not(preceding-sibling::*)">
	  <xsl:text>&#xa;</xsl:text>
	  <xsl:apply-templates mode="person"/>
	</xsl:when>
	<xsl:otherwise>
	  <persName>
	    <xsl:call-template name="royal-role"/>
	    <xsl:if test="string-length($co-type) > 0">
	      <xsl:attribute name="type">
		<xsl:value-of select="$co-type"/>
	      </xsl:attribute>
	    </xsl:if>
	    <xsl:text>&#xa;</xsl:text>
	    <xsl:apply-templates mode="person"/>
	    </persName><xsl:text>&#xa;</xsl:text>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:when>
    <xsl:when test="@tag='person-name'">
      <xsl:apply-templates mode="person"/>
    </xsl:when>
    <xsl:when test="@tag='measure'">
      <xsl:variable name="nsa-data" select="id(@ref)/nsa:data"/>
      <measure type="{$nsa-data/nsa:sysname}" 
	       quantity="{$nsa-data/nsa:mev-disp}"><xsl:text>&#xa;</xsl:text>
      <xsl:apply-templates/>
      </measure><xsl:text>&#xa;</xsl:text>
    </xsl:when>
    <xsl:when test="@type='discourse'">
      <div1 type="discourse" subtype="{@subtype}">
	<xsl:apply-templates/>
      </div1>
    </xsl:when>
    <xsl:when test="@subtype='date'">
      <date>
	<xsl:apply-templates/>
      </date>
    </xsl:when>
    <xsl:otherwise>
      <xsl:apply-templates/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="royal-role">
  <xsl:if test=".//xff:f/@epos='RN'">
    <xsl:attribute name="role">
      <xsl:text>royal</xsl:text>
    </xsl:attribute>
  </xsl:if>
</xsl:template>

<xsl:template name="set-pos">
  <xsl:choose>
    <xsl:when test="@cof-tails">
      <!-- this is supposed to select a proper-noun POS if there is one and just use the first if there is no NN -->
      <xsl:choose>
	<xsl:when test="(.|id(@cof-tails))/xff:f[string-length(@epos)=2 and substring(@epos,string-length(@epos))='N']">
	  <xsl:value-of select="(.|id(@cof-tails))/xff:f[string-length(@epos)=2 and substring(@epos,string-length(@epos))='N'][1]/@epos"/>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:value-of select="xff:f/@epos"/>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
	<xsl:when test="xff:f/@epos">
	  <xsl:value-of select="xff:f/@epos"/>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:value-of select="xff:f/@pos"/>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<!-- Right now we can't apply this to anything but the
     principal's forename as the type/subtype space is taken up by 
     type=patronymic subtype=grandfather -->
<xsl:template name="name-gender-marking">
  <xsl:variable name="orth" select="xff:f/@form"/>
  <xsl:attribute name="type">
    <xsl:choose>
      <xsl:when test="contains($orth,'{f}')">
	<xsl:text>feminine</xsl:text>
      </xsl:when>
      <xsl:when test="contains($orth,'{m}')">
	<xsl:text>masculine</xsl:text>
      </xsl:when>
      <xsl:otherwise>
	<xsl:text>unmarked</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:attribute>
</xsl:template>

<xsl:template name="person-sub">
  <xsl:param name="pos"/>
  <xsl:choose>
    <xsl:when test="not(../preceding-sibling::*)">
      <forename>
	<xsl:call-template name="name-gender-marking"/>
	<xsl:call-template name="forename-n"/>
	<xsl:text>&#xa;</xsl:text>
	<xsl:if test="not(xff:f/@type='cof-tail')">
	  <xsl:apply-templates select="id(@ref)"/>
	</xsl:if>
	</forename><xsl:text>&#xa;</xsl:text>
    </xsl:when>
    <xsl:when test="xcl:props/*[@name='descendant-is']">
      <addName type="clan">
	<!--  <xsl:call-template name="name-gender-marking"/> -->
	<xsl:call-template name="forename-n"/>
	<xsl:text>&#xa;</xsl:text>
	<xsl:if test="not(xff:f/@type='cof-tail')">
	  <xsl:apply-templates select="id(@ref)"/>
	</xsl:if>
	</addName><xsl:text>&#xa;</xsl:text>
    </xsl:when>
    <xsl:when test="xcl:props/*[@name='wife-is']">
      <addName type="spouse">
	<!--  <xsl:call-template name="name-gender-marking"/> -->
	<xsl:call-template name="forename-n"/>
	<xsl:text>&#xa;</xsl:text>
	<xsl:if test="not(xff:f/@type='cof-tail')">
	  <xsl:apply-templates select="id(@ref)"/>
	</xsl:if>
	</addName><xsl:text>&#xa;</xsl:text>
    </xsl:when>
    <xsl:when test="xcl:props/*[@name='grandchild-is']">
      <forename type="patronymic" subtype="grandfather">
	<!--  <xsl:call-template name="name-gender-marking"/> -->
	<xsl:call-template name="forename-n"/>
	<xsl:text>&#xa;</xsl:text>
	<xsl:if test="not(xff:f/@type='cof-tail')">
	  <xsl:apply-templates select="id(@ref)"/>
	</xsl:if>
	</forename><xsl:text>&#xa;</xsl:text>
    </xsl:when>
    <xsl:when test="xcl:props/*[@name='child-is']">
      <forename type="patronymic">
	<!--  <xsl:call-template name="name-gender-marking"/> -->
	<xsl:call-template name="forename-n"/>
	<xsl:text>&#xa;</xsl:text>
	<xsl:if test="not(xff:f/@type='cof-tail')">
	  <xsl:apply-templates select="id(@ref)"/>
	</xsl:if>
	</forename><xsl:text>&#xa;</xsl:text>
    </xsl:when>
    <!--
	<xsl:when test="count(preceding-sibling::xcl:l/xcl:props/*[@name='child-is'])=1">
    -->
    <xsl:otherwise>
      <!-- default to forename -->
      <xsl:if test="not(xff:f/@type='cof-tail')">
	<forename>
	  <xsl:call-template name="forename-n"/>
	  <xsl:apply-templates select="id(@ref)"/>
	</forename>
      </xsl:if>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template mode="person" match="xcl:l">
  <!-- <xsl:message>calling xcl:l[mode=person] on node-id <xsl:value-of select="@xml:id"/></xsl:message> -->
  <xsl:variable name="pos">
    <xsl:call-template name="set-pos"/>
  </xsl:variable>
  <xsl:choose>
    <xsl:when test="$pos='PN' or $pos='LN' or $pos='RN'">
      <xsl:choose>
	<xsl:when test="@cof-tails">
	  <xsl:variable name="pos-node" select="(.|id(@cof-tails))/xff:f[string-length(@epos)=2 and substring(@epos,string-length(@epos))='N'][1]/@epos"/>
	  <xsl:for-each select="$pos-node">
	    <xsl:call-template name="person-sub">
	      <xsl:with-param name="pos" select="$pos"/>
	    </xsl:call-template>
	  </xsl:for-each>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:call-template name="person-sub">
	    <xsl:with-param name="pos" select="$pos"/>
	  </xsl:call-template>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:when>
    <xsl:when test="xcl:props/*[@name='relator']">
      <nameLink>
	<xsl:for-each select="*[1]">
	  <xsl:call-template name="w"/>
	</xsl:for-each>
	<!-- <xsl:apply-templates select="id(@ref)"/> -->
      </nameLink>
    </xsl:when>
    <xsl:when test="xcl:props/*[@group='marker']">
      <roleName type="{xff:f/@sense}">
	<xsl:apply-templates select="id(@ref)"/>
      </roleName>
    </xsl:when>
    <xsl:otherwise>
      <xsl:apply-templates select="."/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template mode="person" match="xcl:c|xcl:d">
  <xsl:apply-templates select="."/>
</xsl:template>

<xsl:template match="xcl:d">
  <xsl:choose>
    <xsl:when test="@type='surface'">
      <xsl:if test="string-length(@ref)>0">
	<xsl:variable name="type" select="id(@ref)/@type"/>
	<xsl:variable name="ptype">
	  <xsl:choose>
	    <xsl:when test="$type='obverse'"><xsl:text>Obverse</xsl:text></xsl:when>
	    <xsl:when test="$type='reverse'"><xsl:text>Reverse</xsl:text></xsl:when>
	    <xsl:when test="$type='bottom'"><xsl:text>Bottom Edge</xsl:text></xsl:when>
	    <xsl:when test="$type='left'"><xsl:text>Left Edge</xsl:text></xsl:when>
	    <xsl:when test="$type='right'"><xsl:text>Right Edge</xsl:text></xsl:when>
	    <xsl:when test="$type='top'"><xsl:text>Top Edge</xsl:text></xsl:when>
	    <xsl:otherwise><xsl:value-of select="$type"/></xsl:otherwise>
	  </xsl:choose>
	</xsl:variable>
	<milestone type="surface" unit="page" n="{$ptype}"/>
      </xsl:if>
    </xsl:when>
    <xsl:when test="@type='column'">
      <cb n="{id(@ref)/@n}"/>
    </xsl:when>
    <xsl:when test="@type='line-start'">
      <xsl:if test="string-length(@ref)>0">
	<lb n="{id(@ref)/@n}"/>
      </xsl:if>
    </xsl:when>
    <xsl:when test="@type='nonw'">
      <note type="inline" rend="dollar"><xsl:apply-templates select="id(@ref)"/></note>
    </xsl:when>
    <xsl:when test="@type='nonx'">
      <!--FIXME: should be @type-->
      <xsl:variable name="note-type">
	<xsl:choose>
	  <xsl:when test="id(@ref)/@scope">
	    <xsl:value-of select="id(@ref)/@scope"/>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:text>other</xsl:text>
	  </xsl:otherwise>
	</xsl:choose>
      </xsl:variable>
      <note type="{translate($note-type,' ','_')}" rend="dollar"><xsl:value-of select="id(@ref)/text()"/></note>
    </xsl:when>
    <xsl:when test="@type='cell-start' or @type='cell-end' or @type='field-start' or @type='field-end'">
      <milestone unit="{@type}">
	<xsl:if test="@type='field-start'">
	  <xsl:attribute name="type"><xsl:value-of select="@subtype"/></xsl:attribute>
	</xsl:if>
      </milestone>
    </xsl:when>
    <xsl:otherwise>
      <xsl:message>xcl:d with unhandled type <xsl:value-of select="@type"/></xsl:message>
    </xsl:otherwise>
  </xsl:choose>
  <xsl:text>&#xa;</xsl:text>
</xsl:template>

<xsl:template name="w">
  <w>
    <xsl:if test="@cf">
      <xsl:attribute name="lemma">
	<xsl:value-of select="concat(@cf,'[',@gw,'//',@sense,']',@pos)"/>
      </xsl:attribute>
    </xsl:if>
    <!-- should use ana="#N" and have featureset in header -->
    <xsl:attribute name="xml:id">
      <xsl:choose>
	<xsl:when test="../@xml:id">
	  <xsl:value-of select="../@xml:id"/>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:value-of select="../../@xml:id"/>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:attribute>
    <xsl:if test="not(@type='cof-tail')">
      <xsl:apply-templates select="id(../@ref)">
	<xsl:with-param name="nl" select="'no'"/>
      </xsl:apply-templates>
    </xsl:if>
  </w>
  <xsl:text>&#xa;</xsl:text>
</xsl:template>

<!-- FIXME: should emit ambiguous lemma on lemma attribute 417.7.1.0-->
<xsl:template match="xcl:ll">
  <xsl:apply-templates select="*[1]"/>
</xsl:template>

<xsl:template name="nn-sub">
  <xsl:param name="pos"/>
  <xsl:choose>
    <xsl:when test="$pos = 'GN'">
      <placeName><settlement>
	<xsl:call-template name="w"/>
      </settlement></placeName>
    </xsl:when>
    <xsl:when test="$pos = 'QN'">
      <placeName><settlement>
	<xsl:call-template name="w"/>
      </settlement></placeName>
    </xsl:when>
    <xsl:when test="$pos = 'SN'">
      <placeName><settlement>
	<xsl:call-template name="w"/>
      </settlement></placeName>
    </xsl:when>
    <xsl:when test="$pos = 'WN'">
      <placeName><settlement>
	<xsl:call-template name="w"/>
      </settlement></placeName>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="w"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="xcl:l">
  <!-- <xsl:message>form=<xsl:value-of select="*[1]/@form"/>: calling xcl:l[mode=none] on node-id <xsl:value-of select="@xml:id"/></xsl:message> -->
  <xsl:if test="not(@cof-head)">
    <xsl:variable name="pos">
      <xsl:call-template name="set-pos"/>
    </xsl:variable>
    <xsl:for-each select="*[1]">
      <xsl:choose>
	<xsl:when test="substring(@epos,string-length(@epos))='N'">
	  <!-- <xsl:message>chose when[1]</xsl:message>	-->
	  <xsl:variable name="pos-node" select="(.|id(@cof-tails))"/>
	  <!-- <xsl:message>count(pos-node) = <xsl:value-of select="count($pos-node)"/></xsl:message> -->
	  <xsl:for-each select="$pos-node">
	    <xsl:call-template name="nn-sub">
	      <xsl:with-param name="pos" select="$pos"/>
	    </xsl:call-template>
	  </xsl:for-each>
	</xsl:when>
	<xsl:when test="not($pos='X') and not($pos='U') and not($pos='u')
			and not($pos='n') and not($pos='L')">
			<!--<xsl:apply-templates select="id(../@ref)"/>-->
			<xsl:call-template name="w"/>
	</xsl:when>
	<xsl:otherwise>
	  <!-- <xsl:message>chose otherwise</xsl:message> -->
	  <xsl:call-template name="w"/>
	  <!-- <xsl:apply-templates select="id(../@ref)"/> -->
	</xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:if>
</xsl:template>

<xsl:template match="gdl:w|gdl:nonw|norm:w">
  <xsl:param name="nl" select="'yes'"/>
  <xsl:apply-templates/>
  <xsl:if test="$nl = 'yes'">
    <xsl:text>&#xa;</xsl:text>
  </xsl:if>
</xsl:template>

<xsl:template match="norm:s">
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="gdl:surro|xtf:surro">
  <choice>
    <abbr><xsl:apply-templates select="*[1]"/></abbr>
    <expan><xsl:apply-templates select="*[position()>1]"/></expan>
  </choice>
</xsl:template>

<xsl:template match="gdl:gg">
  <xsl:choose>
    <xsl:when test="@gdl:type='correction'">
      <choice>
	<corr type="bang">
	  <xsl:apply-templates mode="gsub" select="*[1]"/>
	</corr>
	<xsl:if test="count(*)>1">
	  <sic>
	    <xsl:apply-templates mode="gsub" select="*[position()>1]"/>
	  </sic>
	</xsl:if>
      </choice>
    </xsl:when>
    <xsl:when test="@gdl:type='logo'">
      <xsl:for-each select="*">
	<xsl:apply-templates mode="gsub" select="."/>
	<xsl:value-of select="@gdl:delim"/>
<!--
	<xsl:if test="position() &lt; last()">
	  <xsl:text>.</xsl:text>
	  </xsl:if>
-->
      </xsl:for-each>
    </xsl:when>
    <!--alternation/reordering/ligature need better TEI-ing-->
    <xsl:when test="@gdl:type='alternation'">
      <xsl:for-each select="*">
	<xsl:apply-templates mode="gsub" select="."/>
	<xsl:value-of select="@gdl:delim"/>
<!--	<xsl:if test="not(position()=last())">
	  <xsl:text>/</xsl:text>
	  </xsl:if>
-->
      </xsl:for-each>
    </xsl:when>
    <xsl:when test="@gdl:type='reordering'">
      <xsl:for-each select="*">
	<xsl:apply-templates mode="gsub" select="."/>
	<xsl:value-of select="@gdl:delim"/>
<!--
	<xsl:if test="not(position()=last())">
	  <xsl:text>:</xsl:text>
	  </xsl:if>
-->
      </xsl:for-each>
    </xsl:when>
    <xsl:when test="@gdl:type='ligature'">
      <xsl:for-each select="*">
	<xsl:apply-templates mode="gsub" select="."/>
<!--
	<xsl:if test="not(position()=last())">
	  <xsl:text>+</xsl:text>
	</xsl:if>
-->
      </xsl:for-each>
    </xsl:when>
    <xsl:when test="@gdl:type='group'">
      <!-- FIXME: should probably do some kind of TEI grouping here -->
      <xsl:apply-templates mode="gsub"/>
    </xsl:when>
    <xsl:when test="@gdl:type='implicit-ligature'">
      <!-- this is : used as zero rather than punctuation -->
      <xsl:apply-templates mode="gsub"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:message>gdl:gg type <xsl:value-of select="@gdl:type"/> not handled</xsl:message>
    </xsl:otherwise>
  </xsl:choose>
  <xsl:value-of select="@gdl:delim"/>
</xsl:template>

<xsl:template match="gdl:a">
  <xsl:text>~</xsl:text>
  <xsl:value-of select="text()"/>
</xsl:template>

<xsl:template match="gdl:b">
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="gdl:c">
  <c type="compound">
    <xsl:call-template name="g-with-meta">
      <xsl:with-param name="nodes" select="*"/>
    </xsl:call-template>
  </c>
</xsl:template>

<xsl:template match="gdl:gloss">
  <c type="gloss">
    <xsl:if test="@gdl:type">
      <xsl:attribute name="subtype">
	<xsl:value-of select="@gdl:type"/>
      </xsl:attribute>
    </xsl:if>
    <xsl:apply-templates/>
  </c>
  <xsl:value-of select="gdl:delim"/>
</xsl:template>

<xsl:template match="gdl:m">
  <xsl:text>@</xsl:text>
  <xsl:value-of select="text()"/>
</xsl:template>

<xsl:template match="gdl:g">
  <xsl:text>(</xsl:text>
  <xsl:apply-templates/>
  <xsl:text>)</xsl:text>
</xsl:template>

<xsl:template mode="gsub" match="gdl:gg|gdl:c">
  <xsl:apply-templates select="."/>
  <xsl:value-of select="@gdl:delim"/>
</xsl:template>

<xsl:template mode="gsub" match="gdl:g">
  <xsl:text>(</xsl:text>
  <xsl:apply-templates/>
  <xsl:text>)</xsl:text>
</xsl:template>

<xsl:template match="gdl:o">
  <xsl:choose>
    <xsl:when test="@gdl:type='beside'"><xsl:text>.</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='joining'"><xsl:text>+</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='reordered'"><xsl:text>:</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='repeated'"><xsl:text>×</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='containing'"><xsl:text>×</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='above'"><xsl:text>&amp;</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='crossing'"><xsl:text>%</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='opposing'"><xsl:text>@</xsl:text></xsl:when>
  </xsl:choose>
</xsl:template>

<xsl:template mode="gsub" match="gdl:n">
  <c type="num">
    <xsl:value-of select="gdl:r"/>
    <xsl:if test="count(gdl:*)>1">
      <xsl:text>(</xsl:text>
      <xsl:apply-templates/>
      <xsl:text>)</xsl:text>
    </xsl:if>
  </c>
</xsl:template>

<xsl:template mode="gsub" match="gdl:p">
  <xsl:apply-templates select="."/>
</xsl:template>

<xsl:template mode="gsub" match="gdl:d">
  <xsl:apply-templates/>
</xsl:template>

<xsl:template mode="gsub" match="gdl:o">
  <xsl:choose>
    <xsl:when test="@gdl:type='beside'"><xsl:text>.</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='joining'"><xsl:text>+</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='reordered'"><xsl:text>:</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='repeated'"><xsl:text>×</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='containing'"><xsl:text>×</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='above'"><xsl:text>&amp;</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='crossing'"><xsl:text>%</xsl:text></xsl:when>
    <xsl:when test="@gdl:type='opposing'"><xsl:text>@</xsl:text></xsl:when>
  </xsl:choose>
</xsl:template>

<xsl:template match="gdl:p">
  <xsl:call-template name="g-with-meta">
    <xsl:with-param name="nodes" select="*"/>
  </xsl:call-template>
</xsl:template>

<xsl:template match="gdl:q">
  <xsl:call-template name="g-with-meta">
    <xsl:with-param name="nodes" select="."/>
  </xsl:call-template>
</xsl:template>

<xsl:template match="gdl:r"/> <!-- handled under gdl:n above -->

<xsl:template mode="gsub" match="gdl:q">
  <choice>
    <orig>
      <xsl:apply-templates select="*[1]"/>
    </orig>
    <reg>
      <xsl:apply-templates select="*[2]"/>
    </reg>
  </choice>
</xsl:template>

<xsl:template match="gdl:d|gdl:n|gdl:v|gdl:s|gdl:x">
  <xsl:call-template name="g-with-meta">
    <xsl:with-param name="nodes" select="."/>
  </xsl:call-template>
</xsl:template>

<xsl:template mode="gsub" match="gdl:s|gdl:v|gdl:x">
  <xsl:choose>
    <xsl:when test="ancestor::*[1][self::gdl:d]
		    or (ancestor::*[2][self::gdl:d] and ancestor::*[1][self::gdl:gg])">
      <c type="determinative" rend="{../@gdl:pos|../../@gdl:pos}">
	<xsl:if test="../@gdl:role|../../@gdl:role">
	  <xsl:attribute name="subtype">
	    <xsl:value-of select="../@gdl:role|../../@gdl:role"/>
	  </xsl:attribute>
	</xsl:if>
	<xsl:choose>
	  <xsl:when test="self::gdl:s">
	    <xsl:variable name="s-subtype">
	      <xsl:choose>
		<xsl:when test="@gdl:role">
		  <xsl:value-of select="@gdl:role"/>
		</xsl:when>
		<xsl:otherwise>
		  <xsl:text>sign</xsl:text>
		</xsl:otherwise>
	      </xsl:choose>
	    </xsl:variable>
	    <g type="sign" subtype="{$s-subtype}">
	      <xsl:value-of select="text()"/>
	    </g>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:value-of select="text()"/>
	  </xsl:otherwise>
	</xsl:choose>
      </c>
    </xsl:when>
    <xsl:when test="self::gdl:s">
      <xsl:if test="ancestor::gdl:d/@gdl:pos = 'post'">.</xsl:if>
      <xsl:variable name="s-subtype">
	<xsl:choose>
	  <xsl:when test="@gdl:role">
	    <xsl:value-of select="@gdl:role"/>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:text>sign</xsl:text>
	  </xsl:otherwise>
	</xsl:choose>
      </xsl:variable>
      <xsl:call-template name="g-meta-before"/>
      <c type="sign" subtype="{$s-subtype}">
	<xsl:value-of select="text()"/>
      </c>
      <xsl:call-template name="g-meta-after"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:value-of select="text()"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="spanTo">
  <xsl:param name="prefix" select="''"/>
  <xsl:attribute name="spanTo">
    <xsl:value-of select="concat('#',$prefix,key('statusEnd',@xml:id)/@xml:id)"/>
  </xsl:attribute>
</xsl:template>

<xsl:template name="g-meta-before">
<!--  <xsl:message>g-meta-before: <xsl:value-of select="name()"/> = <xsl:value-of select="@xml:id"/></xsl:message> -->
    <xsl:if test="@gdl:breakStart">
    <anchor type="breakStart">
      <xsl:copy-of select="@xml:id"/>
    </anchor>
  </xsl:if>
  <xsl:if test="@gdl:statusStart">
    <xsl:choose>
      <xsl:when test="@gdl:status='excised'">
	<delSpan type="excised">
	  <xsl:call-template name="spanTo">
	    <xsl:with-param name="prefix" select="'s.e.'"/>
	  </xsl:call-template>
	</delSpan>
      </xsl:when>
      <xsl:when test="@gdl:status='implied'">
	<addSpan type="implied">
	  <xsl:call-template name="spanTo">
	    <xsl:with-param name="prefix" select="'s.i.'"/>
	  </xsl:call-template>
	</addSpan>
      </xsl:when>
      <xsl:when test="@gdl:status='supplied'">
	<addSpan type="supplied">
	  <xsl:call-template name="spanTo">
	    <xsl:with-param name="prefix" select="'s.s.'"/>
	  </xsl:call-template>
	</addSpan>
      </xsl:when>
      <xsl:when test="@gdl:status='maybe'">
	<addSpan type="maybe">
	  <xsl:call-template name="spanTo">
	    <xsl:with-param name="prefix" select="'s.m.'"/>
	  </xsl:call-template>
	</addSpan>
      </xsl:when>
      <xsl:otherwise>
	<xsl:message>@gdl:statusStart <xsl:value-of select="@gdl:status"/> not handled</xsl:message>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:if>
  <xsl:if test="@gdl:ho">
    <xsl:choose>
      <xsl:when test="@gdl:hc">
	<damageSpan spanTo="{concat('#d.',@xml:id)}"/>
      </xsl:when>
      <xsl:otherwise>
	<damageSpan spanTo="{concat('#d.',following::gdl:*[@gdl:hc][1]/@xml:id)}"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:if>
</xsl:template>

<xsl:template name="g-meta-after">
<!--  <xsl:message>g-meta-after: <xsl:value-of select="name()"/> = <xsl:value-of select="@xml:id"/></xsl:message> -->
  <xsl:if test="@gdl:hc">
    <anchor type="damage">
      <xsl:attribute name="xml:id">
	<xsl:value-of select="concat('d.',@xml:id)"/>
      </xsl:attribute>
    </anchor>
  </xsl:if>
  <xsl:if test="@gdl:statusEnd">
    <xsl:variable name="prefix">
      <xsl:choose>
	<xsl:when test="@gdl:status='excised'"><xsl:text>s.e.</xsl:text></xsl:when>
	<xsl:when test="@gdl:status='implied'"><xsl:text>s.i.</xsl:text></xsl:when>
	<xsl:when test="@gdl:status='maybe'"><xsl:text>s.m.</xsl:text></xsl:when>
	<xsl:when test="@gdl:status='supplied'"><xsl:text>s.s.</xsl:text></xsl:when>
	<xsl:otherwise>unhandled statusEnd: <xsl:value-of select="@gdl:status"/></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <anchor>
      <xsl:attribute name="xml:id">
	<xsl:value-of select="concat($prefix,@xml:id)"/>
      </xsl:attribute>
      <xsl:attribute name="type">
	<xsl:value-of select="id(@gdl:statusEnd)/@gdl:status"/>
      </xsl:attribute>
    </anchor>
  </xsl:if>
  <xsl:if test="@gdl:breakEnd">
    <anchor type="breakEnd" corresp="{concat('#',@gdl:breakEnd)}"/>
  </xsl:if>
</xsl:template>

<xsl:template name="g-with-meta">
  <xsl:param name="nodes"/>
<!--  <xsl:message>g-with-meta: <xsl:value-of select="name()"/> = <xsl:value-of select="@xml:id"/></xsl:message> -->
  <xsl:if test="@gdl:breakStart">
    <anchor type="breakStart">
      <xsl:copy-of select="@xml:id"/>
    </anchor>
  </xsl:if>
  <xsl:if test="@gdl:statusStart">
    <xsl:choose>
      <xsl:when test="@gdl:status='excised'">
	<delSpan type="excised">
	  <xsl:call-template name="spanTo">
	    <xsl:with-param name="prefix" select="'s.e.'"/>
	  </xsl:call-template>
	</delSpan>
      </xsl:when>
      <xsl:when test="@gdl:status='implied'">
	<addSpan type="implied">
	  <xsl:call-template name="spanTo">
	    <xsl:with-param name="prefix" select="'s.i.'"/>
	  </xsl:call-template>
	</addSpan>
      </xsl:when>
      <xsl:when test="@gdl:status='supplied'">
	<addSpan type="supplied">
	  <xsl:call-template name="spanTo">
	    <xsl:with-param name="prefix" select="'s.s.'"/>
	  </xsl:call-template>
	</addSpan>
      </xsl:when>
      <xsl:when test="@gdl:status='maybe'">
	<addSpan type="maybe">
	  <xsl:call-template name="spanTo">
	    <xsl:with-param name="prefix" select="'s.m.'"/>
	  </xsl:call-template>
	</addSpan>
      </xsl:when>
      <xsl:otherwise>
	<xsl:message>@gdl:statusStart <xsl:value-of select="@gdl:status"/> not handled</xsl:message>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:if>
  <xsl:if test="@gdl:ho">
    <xsl:choose>
      <xsl:when test="@gdl:hc">
	<damageSpan spanTo="{concat('#d.',@xml:id)}"/>
      </xsl:when>
      <xsl:otherwise>
	<damageSpan spanTo="{concat('#d.',following::gdl:*[@gdl:hc][1]/@xml:id)}"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:if>
  <xsl:choose>
    <xsl:when test="@gdl:queried and @gdl:collated">
      <corr cert="medium">
	<xsl:apply-templates mode="gsub" select="$nodes"/>
      </corr>
    </xsl:when>
    <xsl:when test="@gdl:queried">
      <corr cert="low">
	<xsl:apply-templates mode="gsub" select="$nodes"/>
      </corr>
    </xsl:when>
    <xsl:when test="@gdl:collated">
      <corr cert="high">
	<xsl:apply-templates mode="gsub" select="$nodes"/>
      </corr>
    </xsl:when>
    <xsl:otherwise>
      <xsl:apply-templates mode="gsub" select="$nodes"/>
    </xsl:otherwise>
  </xsl:choose>
  <xsl:if test="@gdl:hc">
    <anchor type="damage">
      <xsl:attribute name="xml:id">
	<xsl:value-of select="concat('d.',@xml:id)"/>
      </xsl:attribute>
    </anchor>
  </xsl:if>
  <xsl:if test="@gdl:statusEnd">
    <xsl:variable name="prefix">
      <xsl:choose>
	<xsl:when test="@gdl:status='excised'"><xsl:text>s.e.</xsl:text></xsl:when>
	<xsl:when test="@gdl:status='implied'"><xsl:text>s.i.</xsl:text></xsl:when>
	<xsl:when test="@gdl:status='maybe'"><xsl:text>s.m.</xsl:text></xsl:when>
	<xsl:when test="@gdl:status='supplied'"><xsl:text>s.s.</xsl:text></xsl:when>
	<xsl:otherwise>unhandled statusEnd: <xsl:value-of select="@gdl:status"/></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <anchor>
      <xsl:attribute name="xml:id">
	<xsl:value-of select="concat($prefix,@xml:id)"/>
      </xsl:attribute>
      <xsl:attribute name="type">
	<xsl:value-of select="id(@gdl:statusEnd)/@gdl:status"/>
      </xsl:attribute>
    </anchor>
  </xsl:if>
  <xsl:if test="@gdl:breakEnd">
    <anchor type="breakEnd" corresp="{concat('#',@gdl:breakEnd)}"/>
  </xsl:if>
  <xsl:value-of select="@gdl:delim"/>
</xsl:template>

<xsl:template name="flags">
  <xsl:if test="@gdl:remarked"><xsl:text>!</xsl:text></xsl:if>
  <xsl:if test="@gdl:queried"><xsl:text>?</xsl:text></xsl:if>
  <xsl:if test="@gdl:collated"><xsl:text>*</xsl:text></xsl:if>
</xsl:template>

<!-- ignored tags at the line level -->
<xsl:template match="xtf:cmt|xtf:m|xtf:note"/>

<xsl:template match="gdl:nonw">
  <xsl:value-of select="text()"/>
</xsl:template>

<xsl:template name="forename-n">
  <xsl:attribute name="xml:id">
    <xsl:value-of select="@xml:id"/>
  </xsl:attribute>
  <xsl:attribute name="n">
    <xsl:value-of select="concat(xff:f[1]/@cf,'[',xff:f[1]/@gw,']')"/>
  </xsl:attribute>
  <xsl:attribute name="nymRef">
    <xsl:variable name="orth" select="xff:f[1]/@form"/>
<!-- <xsl:message>orth=<xsl:value-of select="$orth"/></xsl:message> -->
    <xsl:for-each select="document($listNym)">
      <xsl:value-of select="concat('#',key('nym-orths',$orth)/@xml:id)"/>
    </xsl:for-each>
  </xsl:attribute>
  <xsl:choose>
    <xsl:when test="xcl:props/*[@name='group-head']">
      <anchor type="{xcl:props/*[@name='group-type']/@value}">
	<xsl:attribute name="xml:id">
	  <xsl:value-of select="concat(/*/@xml:id,'.',generate-id(.))"/>
	</xsl:attribute>
      </anchor>
    </xsl:when>
    <xsl:when test="xcl:props/*[@name='group-with']">
      <ptr type="name-group" 
	   target="{concat(/*/@xml:id,'.',generate-id(id(
 	 	    substring-after(xcl:props/*[@name='group-with'][1]/@ref, '#'))))}"/>
    </xsl:when>
  </xsl:choose>
</xsl:template>

<xsl:template match="atf">
  <xsl:call-template name="tei-handler">
    <xsl:with-param name="root-node" select="."/>
  </xsl:call-template>
</xsl:template>

<xsl:template mode="gsub" match="*">
  <xsl:message>xtf2tei.xsl: <xsl:value-of select="/*/@project"/>:<xsl:value-of 
  select="ancestor-or-self::*[@xml:id][1]/@xml:id"/>: tag `<xsl:value-of 
    select="local-name()"/>' not handled in gsub mode</xsl:message>
</xsl:template>

<xsl:template match="*">
  <xsl:message>xtf2tei.xsl:  <xsl:value-of select="/*/@project"/>:<xsl:value-of 
  select="ancestor-or-self::*[@xml:id][1]/@xml:id"/>: tag `<xsl:value-of 
    select="local-name()"/>' not handled</xsl:message>
</xsl:template>

</xsl:stylesheet>
