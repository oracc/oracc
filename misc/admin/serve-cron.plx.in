#!/usr/bin/perl
use warnings; use strict;

my $oracc = '@@ORACC@@';
my $oracc_builds = '@@ORACC_BUILDS@@';
my $oracc_host = '@@ORACC_HOST@@';

sub xsystem;

my $dashline = "--------------------------------------------------------------";
my $dry = shift @ARGV;

#my @BUILD_HOSTS = ('build-oracc.museum.upenn.edu',
#		   'oracc.ub.uni-muenchen.de');
#

my $build_hosts_file = '/etc/oracc-build-hosts';
if (-r '@@ORADMIN@@/.vm_name') {
    my $vmname = `cat @@ORADMIN@@/.vm_name`;
    my $f = "@@ORADMIN@@/etc/oracc-build-hosts.$vmname";
    if (-r $f) {
	$build_hosts_file = $f;
    }
}

my @BUILD_HOSTS = `cat $build_hosts_file`; chomp @BUILD_HOSTS;

my @need_indexing = ();

sc_log($dashline);
sc_log("Cron job serve-cron started at ", scalar localtime());

foreach my $buildhost (@BUILD_HOSTS) {
    my $http = 'http';
    $http = 'https' unless $buildhost =~ /muenchen/;

    my @servelist = `curl -k -s $http://$buildhost/srv/`; chomp @servelist;

    my $msg = sprintf("%d entries retrieved from build server $buildhost", $#servelist+1);
    sc_log($msg);

    foreach my $s (@servelist) {
	my($project,$datestamp) = split(/\s+/,$s);
        if (-d "$oracc_builds/$project/.git") {
	    sc_log("$project is a git repo; skipping installation");
	    next;
	}
	my $installstamp = ((stat("$oracc_builds/$project/installstamp"))[9] || 0);
	if ($datestamp > $installstamp) {
	    sc_log("$project needs updating (built $datestamp, installed $installstamp)");
	    xsystem "/bin/sh", "$oracc/bin/serve-install.sh", $project, $buildhost;
	    push @need_indexing, [ $project , $buildhost ];
	} else {
#	    sc_log("$project is up-to-date (built $datestamp, installed $installstamp)");
	}
    }
}

foreach my $n (@need_indexing) {
    xsystem "/bin/sh", "$oracc/bin/serve-index.sh", $$n[0], $$n[1];
}

xsystem "/bin/sh", "$oracc/bin/orc", "agg-project-list.sh";

sc_log("Updates completed ", scalar localtime());
sc_log($dashline);

#################################################################################

sub
sc_log {
    warn @_, "\n";
}

sub
xsystem {
    system(@_) unless $dry;
}

1;
