#!/usr/bin/perl
use warnings; use strict; use open ':utf8';
use lib '@@ORACC@@/lib'; # '@@ORACC@@/lib';
use ORACC::Expand2;
use ORACC::XML;
use ORACC::NS;

use Data::Dumper;

use ORACC::SMA::ParseManual;
use ORACC::SSA3::Util;
use ORACC::SSA3::MakeLeaves;
use ORACC::OSS2::Manager;
use ORACC::OSS2::XCL;

use Getopt::Long;
my $chatty = 0;
$ORACC::OSS2::leaves_only = 0;
my @list = ();
my $outdir = '';
my $project = '';
$ORACC::OSS2::refs_only = 0;
my $standalone = 0;
my $stdin = 0;
my $text = '';
$ORACC::OSS2::verbose = 0;

GetOptions (
    'alone'=>\$standalone,
    'chatty'=>\$chatty,
    'leaves'=>\$ORACC::OSS2::leaves_only,
    'list:s'=>\@list,
    'outdir:s'=>\$outdir,
    'project:s'=>\$project,
    'refs'=>\$ORACC::OSS2::refs_only,
    'stdin+'=>\$stdin,
    'verbose+'=>\$ORACC::OSS2::verbose,
    );

my $status = 0;
my @files = ();
my $xcldoc = undef;

#$project = `oraccopt` unless $project || $standalone;
$project = 'epsdc' unless $project;
ORACC::SSA3::Util::set_data_dir("@@ORACC_BUILDS@@/$project/00etc/ssa/");

ORACC::OSS2::Log::log_init();

if ($#list >= 0) {
    foreach my $list (@list) {
	open(IN, $list) || die "xclmanager.plx: can't open list file $list\n";
	while (<IN>) {
	    chomp;
	    push @files, $_;
	}
	close(IN);
    }
} elsif ($stdin) {
    while (<>) {
	chomp;
	push @files, $_;
    }
} else {
    @files = @ARGV;
}

foreach my $f (@files) {
    $status = 0;
    one_file($f);
}

sub
one_file {
    my $xcl = shift;
    my $local_project = $project;
    if ($xcl =~ /^(.*?):(.*)$/) {
	$local_project = $1;
	$xcl = $2;
    }

    $xcl = expand_in_project(undef,"$xcl.xtf",$local_project) if $xcl =~ /^[PQX]\d+$/;
    my($pq) = $xcl;
    $pq =~ s/^.*?([PQX]\d{6,}).*/$1/;
    my $xst = $xcl;
    $xst =~ s/\.[^.]+$/xst/;

    warn "oss.plx: processing $xcl\n" if $chatty;
    warn "oss.plx: can't read $xcl\n" and return unless -e $xcl;

    my ($xcldoc,@refs) = ORACC::OSS2::XCL::load_xcl_refs($xcl);
    
    if ($status) {
	return;
    } else {
	my $id = xid($xcldoc);
	my @phrasal = ();
	eval { @phrasal = ORACC::OSS2::Manager::run($xcldoc,$id,@refs); };
	warn $@ and return if $@;
	my $xst = $xcl;
	$xst =~ s/\.[^.]+$/.xst/;
	if ($outdir) {
	    $xst =~ s#^.*?([^/]+)$#$outdir/$1#;
	}
	if ($xcldoc && $#phrasal >= 0) {
	    open(X, ">$xst") || die "oss.plx: can't write to $xst\n";
	    print X $xcldoc->toString();
	    close(X);
	} else {
	    warn "oss.plx: phrase generation failed\n";
	}
    }
    undef $xcldoc;
}

ORACC::OSS2::Log::log_term();

1;
