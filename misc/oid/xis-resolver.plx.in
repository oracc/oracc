#!/usr/bin/perl
use warnings; use strict; use integer;

warn "xis-resolver.plx ARGV=@ARGV\n";

my ($proj,$lang,$xis,$page,$size,$mode,$all) = @ARGV;

xml_error("no project in request") unless $proj;
xml_error("no language in request") unless $lang;
xml_error("no xis in request") unless $xis;
xml_error("no page in request") unless defined $page;
xml_error("no size in request") unless defined $size;
xml_error("no mode in request") unless defined $mode;

$page = 1 unless defined $page;
$size = 25 unless $size;

my $count = -1;
my $projwdir = "@@ORACC_BUILDS@@/www/$proj";
my $projpdir = "@@ORACC_BUILDS@@/pub/$proj";
my $tisfile = "$projpdir/cbd/$lang/$lang.tis";

xml_error("bad page specification") unless $page==0 || $page =~ /^\d+/;
xml_error("bad size specification") unless $size==0 || $size =~ /^(25|50|100)$/;
xml_error("bad mode specification") unless $mode eq 'xml' || $mode eq 'html';

unless (-r $tisfile) {
    xml_error("bad project in request") unless -d "@@ORACC_BUILDS@@/lib/$proj";
    xml_error("bad language in request") unless -d "$projpdir/cbd/$lang";
    xml_error("no public language data") unless -d "$projpdir/cbd/$lang.tis";
}

my $baselang = $lang; $baselang =~ s/-.*$//;
my $bucket = $xis; $bucket =~ s/^$baselang\.//; $bucket =~ s/^(.....).*$/$1/;
my $bucketpath = "$projwdir/cbd/$lang/xis/$bucket"; warn "bucketpath=$bucketpath\n";
my $xisdata = "$bucketpath/$xis";
my $instances = "$xisdata/instances";

unless (-r $instances) {
    xml_error("no web language data") unless -d "$projwdir/cbd/$lang";
    $count = `@@ORACC@@/bin/xisdb $tisfile -c $xis`;
    xml_error("bad xis in request") unless $count;
    my $xisdir = "$projwdir/cbd/$lang/xis";
    system('mkdir', '-p', $xisdir) unless -d $xisdir;
    xml_error("failed to find or create xis cache $xisdir") unless -d $xisdir;
    system('mkdir', '-p', $bucketpath) unless -d $bucketpath;
    xml_error("failed to find or create xis bucket $bucketpath") unless -d $bucketpath;
    system('mkdir', '-p', $xisdata) unless -d $xisdata;
    xml_error("failed to find or create xis data $xisdata") unless -d $xisdata;
    xis_init($xisdata);    
} else {
    my $n = `cat $xisdata/count`; chomp $n;
    $count = $n;
}

if ($all eq 'all' && $count < 100) {
    xis_result();
} elsif ($page) {
    my $npages = $count / $size;
    ++$npages if $count % $size;
    $page = $npages unless $page <= $npages;
    xis_result();
} else {
    xml_count($count);
}

###############################################################################

sub xis_result {
    my $list = xis_page();

    # use p3 context engine code to create xml version of page
    my $xml = xis_xml($list);

    $xml =~ s/xml$/html/ if $mode eq 'html';

    # return xml to client
    xml_header();
    exec 'cat', $xml;
}

sub xis_xml {
    my $list = shift;
    my $htmlfile = $list;
    my $xmlfile = $list;
    $htmlfile =~ s/lst$/html/;
    $xmlfile =~ s/lst$/xml/;
    unless (-r $xmlfile) {
	system("@@ORACC@@/bin/wm -p$proj -l -i$list | @@ORACC@@/bin/ce_xtf -3 -l -p $proj >$xmlfile");
	system('xsltproc',
	       '-stringparam', 'divwrap', 'yes',
	       '-stringparam', 'fragment', 'yes',
	       '-stringparam', 'project', $proj,
	       '-o', $htmlfile, '@@ORACC@@/lib/scripts/p3-ce-HTML.xsl', $xmlfile)
    }
    $xmlfile;
}

sub xis_init {
    system("@@ORACC@@/bin/xisdb $tisfile $xis >$xisdata/instances");
    open(C,">$xisdata/count"); print C $count; close(C);
}

# use p3-slicer code to extract page from xis list
sub xis_page {
    my $pagefile = '';
    if ($all eq 'all') {
	$pagefile = "$xisdata/instances";
    } else {
	$pagefile = "$xisdata/p${page}s$size.lst";
	unless (-r $pagefile) {
	    if ($page == 1) {
		system "head -$size $xisdata/instances >$pagefile";
	    } else {
		my $from = (($page-1) * $size) + 1;
		my $to = ($page * $size);
		if ($to > $count) {
		    $to = $count;
		}
		system "sed -n '${from},${to}p' $xisdata/instances >$pagefile";
	    }
	}
    }
    $pagefile;
}

sub xml_count {
    xml_header();
    print '<count>',$count,'</count>',"\n";
}

sub xml_error {
    my $err = shift;
    xml_header();
    print '<error>',$err,'</error>',"\n";
    exit 0;
}

sub xml_header {
    print "Content-type: text/xml; charset=utf-8\nAccess-Control-Allow-Origin: *\n\n";
}

1;
