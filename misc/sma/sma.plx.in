#!/usr/bin/perl
use warnings; use strict; use open 'utf8'; use utf8;
use lib '@@ORACC@@/lib';
use ORACC::SMA::Base;
use ORACC::SMA::StripVPR;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use constant MAX_TRIES => 7;

my $allforms = 0;
my $cang = '>';
my $base = '';
my $form = '';
my $glossary = '';
my $input = '';
my $input_line = 0;
my $lemma = '';
my $nobase = 0;
my $nolemm = 0;
my $output = '';
my $project = 'epsd';
my $sig_output = 0;
my $slave = 0;
my $V_hack_flag = 0;
my $verbose = 0;
my $with_id = 0;
my $xli = 0;

GetOptions(
    "allforms"=>\$allforms,
    "base:s"=>\$base,
    "form:s"=>\$form,
    "glossary:s"=>\$glossary,
    "id"=>\$with_id,
    "input:s"=>\$input,
    "lemma:s"=>\$lemma,
    "nobase"=>\$nobase,
    "nolemm"=>\$nolemm,
    "no-external-bases"=>\$ORACC::SMA::no_external_bases,
    "output:s"=>\$output,
    "project:s"=>\$project,
    "sig"=>\$sig_output,
    "slave"=>\$slave,
    "try"=>\$ORACC::SMA::try_only_zero,
    "verbose"=>\$verbose,
    "xli"=>\$xli,
    ) || pod2usage(1);

Encode::_utf8_on($form) if $form;
Encode::_utf8_on($lemma) if $lemma;

binmode STDERR, ':utf8';
binmode STDIN,  ':utf8';
#binmode STDOUT, ':utf8';

$ORACC::SMA::verbose = $verbose;

$| = 1;

my $glossary_last = 0;
my $ok_flag = 0;
my %morph_disambigs = ();
my @morph_disambigs = qw/a k eE eL eV m n ak akak akam ake bi da e l ra ta/;

@morph_disambigs{@morph_disambigs} = ();

my %morph_disambig_morphs = (
    a=>'.a',
    k=>'.ak',
    eE=>'.eE',
    eL=>'.eL',
    eV=>'.eV',
    m=>'.am',
    n=>'.a',
    ak=>'.ak',
    akak=>'.ak.ak',
    akam=>'.ak.am',
    ake=>'.ak.e',
    bi=>'.bi',
    da=>'.da',
    e=>'.e',
    l=>'.eL',
    ra=>'.ra',
    ta=>'.ta'
    );

my %seen = ();
my $t_warning;
my $warning = '';

#open(SMALOG,">/tmp/sma$$.log");
if ($xli) {
    $SIG{'__WARN__'} = \&save_warning;
    $SIG{'__DIE__'} = \&save_warning;
#    smalog("enabled WARN/DIE handler");
} else {
    binmode STDOUT, ':utf8';
}

if ($output) {
    open(OUT,">$output") || die "sma.plx: can't write to `$output'\n";
    select OUT;
}

#smalog("loading $project");
ORACC::SMA::Base::load($project);
#smalog("load complete");

if ($nolemm) {
    while (<>) {
	chomp;
	nolemma($_);
    }
    exit 0;
}

if ($glossary) {
    my @bases;
    my $qpn_forms = 0;
    open(IN,$glossary) || die "sma.plx: can't open $glossary\n";
    while (<IN>) {
	if (/\@lang\s+qpn/) {
	    $qpn_forms = 1;
	    print;
	} elsif (/^\@entry\*?\s+(.*?)\s+\[(.*?)\]\s+(\S+)\s*$/) {
	    $lemma = "$1\[$2\]$3";
	    %seen = ();
	    print;
	} elsif (/^\@bases\s+(.*?)\s$/ && !$nobase) {
	    @bases = split(/;\s+/,$1);
	    print;
	} elsif (/^\@form/ && (!$qpn_forms || /\%sux/)) {
	    if ($allforms || /^\@form\s*\S+\s*$/) {
		/\s+(\S+)/;
		$form = $1;
		if (/\s\S*?_/) {
		    print;
		} else {
		    if ($nobase) {
			($form) = (/\s(\S+)/);
			if (t($form,$lemma,'')) {
			    print;
			} else {
			    print;
			    warn;
			}
		    } elsif (m#/(\S+)#) {
			my $base = $1;
			if (t($form,$lemma,$base)) {
			    print;
			}
		    } else {
			for (my $i = 0; $i <= $#bases; ++$i) {
			    my $b = $bases[$i];
			    $glossary_last = ($i==$#bases);
			    $ok_flag = 0;
			    t($form,$lemma,$b);
			    last if $ok_flag;
			}
			print unless $ok_flag;
		    }
		}
	    } else {
		print;
	    }
	} else {
	    print;
	}
    }
} elsif ($input) {
    open(IN,$input) || die "sma.plx: can't open $input\n";
    $input_line = 0;
    while (<IN>) {
	++$input_line;
	next if /^\#/ || /^\s*$/;
	chomp;
	if (/\t/) {
	    my($id,$f,$l,$b);
	    if ($with_id) {
		($id,$f,$l,$b) = split(/\t/,$_);
	    } else {
		($f,$l,$b) = split(/\t/,$_);
	    }
	    t($f,$l,$b,$id);
	} else {
	    t($_,$lemma,$base);
	}
    }
    close(IN);
} elsif ($form) {
    t($form,$lemma,$base);
} elsif ($#ARGV >= 0) {
    foreach (@ARGV) {
	t($_,$lemma,$base);
    }
} else {
    while (<>) {
	chomp;
#	smalog('input: ', $_);
	if ($slave) {
	    if (/^\s*$/) {
#		close(SMALOG);
		exit(0);
	    } else {
		eval {
		    t(split(/\t/,$_));
		};
#		smalog("\$\@ = $@; \$warning = $warning\n");
		$warning = $@ if $@ && !$warning;
		if ($warning) {
		    if ($warning !~ /^sma:/) {
			$warning =~ s/^/sma internal:/;
		    }
		    $warning =~ tr/\n\r//d;
		    Encode::_utf8_off($warning);
		    syswrite STDOUT, "\000$warning\n";
		    $warning = '';
		} elsif ($t_warning) {
		    $t_warning =~ tr/\n\r//d;
		    Encode::_utf8_off($t_warning);
		    syswrite STDOUT, "\000t_warning:`$warning'\n";
		} # else we printed a morphology result		
	    }
	} else {
	    next if /^\#/ || /^\s*$/;
	    if (/\t/) {
		my($f,$l,$b) = split(/\t/,$_);
		t($f,$l,$b);
	    } else {
		t($_,$lemma,$base);
	    }
	}
    }
}

ORACC::SMA::Base::unload();
#smalog("closing SMALOG");
#close(SMALOG);
#############################################################################

sub
t {
    my($f,$l,$b,$id) = @_;
    my $use_f = $f;
    my $try_number = 0;
    my $arg_base = undef;
    my $xli_base = 0;
    my @found_bases_ok = ();
    my $morph_augment = '';
    my $morph_disambig = '';
    $t_warning = '';
    if ($f =~ s/\\(.*)$//) {
	$morph_disambig = $1;
	$use_f = "$f\\$morph_disambig";
    }
    if ($f =~ s/\+(\..*)//) {
	$morph_augment = $1;
    }
    if ($b) {
	$arg_base = $b;
	$xli_base = 1 if $xli;
    }
  retry:
    my ($found_bases, @parses) = ORACC::SMA::Base::parse($use_f,
							 $l,$try_number,$arg_base);
    if (0 == $try_number) {
	@found_bases_ok = ($found_bases ? @$found_bases : ());
    } elsif ($#$found_bases >= 0 && $#found_bases_ok < 0) {
	@found_bases_ok = @$found_bases;
    }
    if ($#parses == 0) {
	my($base,$cont,$morph,$stem) = ($$found_bases[0], ORACC::SMA::Base::get_info($parses[0]));
	my $newbase = ($try_number ? '+' : '');
	clear_V_hack($l);
	if ($morph_disambig) {
	    $f .= "\\$morph_disambig";
	    if ($morph_disambig =~ /^\./) {
		$morph .= $morph_disambig;
	    } else {
		if ($morph eq '~') { # otherwise NSF will have taken care of this
		    if ($morph_disambig_morphs{$morph_disambig}) {
			$morph .= $morph_disambig_morphs{$morph_disambig};
		    } else {
			warn "sma: $f has unknown morphology disambiguator `$morph_disambig'\n";
		    }
		}
	    }
	}
	if ($xli) {
	    if ($try_number) {
		$base = "+$base";
	    }
	    if ($cont && $cont ne '0') {
		$cont =~ s/=\+/=/;
		$cont =~ s/^-?/-/;
	    }
	    $morph =~ s/~\./~,/;
	    my $ret = "$base\t$cont\t$morph\t$stem\n";
	    Encode::_utf8_off($ret);
	    syswrite STDOUT, $ret;
	    return 0;
	} elsif ($glossary) {
	    unless ($seen{$f}++) {
		$ok_flag = 1;
		warn "sma: $f=$l has new BASE $base\n" if $try_number;
		my $stemstr = '';
		$stemstr = "*$stem " if $stem;
		if ($cont && $cont ne '0') {
		    $cont =~ s/=\+/=/;
		    $cont = " +-$cont";
		} else {
		    $cont = '';
		}
		# \$$norm 
		my $lang = '';
		$lang = ' %sux' if /\%sux/;
		my $wstr = "\@form\t$f$lang $stemstr/$newbase$base$cont #$morph\n";
		Encode::_utf8_off($wstr);
		syswrite STDOUT, $wstr;
	    }
	    return 0;
	} else {
	    my $stemstr = '';
	    $stemstr = "*$stem " if $stem;
	    if ($cont && $cont ne '0') {
		$cont =~ s/=\+/=/;
		$cont =~ s/^-?/-/;
	    }
	    
	    my $wstr = '';
	    if ($sig_output) {
		my $cfgw = $l;
		$cfgw =~ s,\[(.*?)\],[$1//$1], unless $cfgw =~ m,//,;
		$cfgw =~ s,\](.*?)$,\]$1'$1, unless $cfgw =~ m,',;
		$wstr = "\@$project%sux:$f=$cfgw$stemstr/$newbase$base+$cont#$morph\n";
	    } else {
		$wstr = "\@form $f=$l $stemstr/$newbase$base +$cont #$morph\n";
	    }
	    #	    Encode::_utf8_off($wstr);
	    #	    syswrite STDOUT, $wstr;
	    print "$id\t" if $id;
	    print $wstr;
	    return 0;
	}
    } elsif ($#parses < 0) {
	if (!$try_number) {
	    if (!$xli_base) {
		if ($glossary) {
		    warn "sma:$.: no parse for form `$f' with base `$b'\n";
		} elsif ($b) {
#		    new_sma_warn("no parse for $f $l $b");
		} else {
		    warn "sma:$.: no parses found and no base given; try giving BASE\n"
			unless $xli;
		}
	    } else {
		warn "sma: no parses found for form with base; please give MORPH\n";
	    }
	}
      sub_retry:
	return 1 if $ORACC::SMA::try_only_zero;
	if ($try_number < MAX_TRIES) {
	    ++$try_number;
	    if ($try_number == 1) { 
		$use_f =~ s/\{.*?\}//g;
		goto retry;
	    } elsif ($try_number == 2) {
		goto retry;
	    } elsif ($try_number == 3) {
		$use_f =~ s/\(.*?\)//g;
		goto retry;
	    } elsif ($try_number == 4) {
		$use_f = $f;
		$arg_base = sux_find_base($f,$l);
		if ($arg_base) {
		    goto retry;
		} else {
		    goto sub_retry;
		}
	    } elsif ($try_number == 5) {
		my $novpr = strip_vpr(split(/-/,$f));
		$arg_base = sux_find_base($novpr,$l) if $novpr;
		if ($arg_base) {
		    goto retry;
		} else {
		    goto sub_retry;
		}
	    } elsif ($try_number == 6) {
		if ($l =~ s/\]N/]V/) {
		    $V_hack_flag = 1;
		    goto retry;
		} else {
		    goto sub_retry;
		}
	    } elsif ($try_number == 7) {
		clear_V_hack($l);
		goto retry;
	    }
	    
	}
	clear_V_hack($l);
        if (!$glossary || $glossary_last) {
	    if ($#found_bases_ok < 0) {
		if ($b) {
		    Encode::_utf8_on($b);
		    new_sma_warn("no parses found for base `$b' and form/lem $f=$l");
		} else {
		    warn "sma: $f=$l no acceptable bases found in form\n";
		}
	    } else {
		if ($b) {
		    Encode::_utf8_on($b);
		    new_sma_warn("no parse for $f $l $b");
		} else {
		    new_sma_warn("$f=$l no parse found for @found_bases_ok\n");
		}
	    }
        }
    } else {
#	use Data::Dumper;
#	open(L,">sma.log");
#	print L Dumper(\@parses);
#	close(L);
	warn "sma: $f=$l matched bases @$found_bases\n";
    }
    return 1;
}

sub
clear_V_hack {
    if ($V_hack_flag) {
	$_[0] =~ s/\]V/]N/;
	$V_hack_flag = 0;
    }
}

sub
correct_base {
    my($parse,$form) = @_;
    my $skip_isf = ${$$parse{'isf'}}{'post_isf'} || 0;
    my $skip_nsf = ${$$parse{'nsf'}}{'post_nsf'} || 0;
    my $skip_vpr = ${$$parse{'vpr'}}{'post_vpr'} || 0;
    my $skip_vsf = ${$$parse{'vsf'}}{'post_vsf'} || 0;
    my @form = split(/-/,$form);
    my $post_skip = $skip_nsf+$skip_vsf+$skip_isf;
    while ($skip_vpr > 0) {
	shift @form;
	--$skip_vpr;
    }
    while ($post_skip > 0) {
	pop @form;
	--$post_skip;
    }
    join('-',@form);
}

sub
disambig_morph {
    my($f,$m,$d) = @_;
    if ($d eq 'k') {
	if ($m !~ /[,\.]ak$/) {
	    if ($m =~ /a$/) {
		$m .= 'k';
	    } else {
		$m .= '.ak';
	    }
	}
    } elsif ($d eq 'a') {
	if ($m !~ /[,\.]a$/) {
	    if ($m =~ /[,\.]ak$/) {
		$m =~ s/k$//;
	    } else {
		$m .= '.a';
	    }
	    $f .= '\\a' unless $f =~ /\\a$/;
	}
    }
    ($f,$m);
}

#sub
#smalog {
#    print SMALOG @_, "\n";
#}

sub
new_sma_warn {
    if ($input) {
	warn "$input:$input_line: ", @_, "\n";
    } else {
	warn "sma:$.: ", @_, "\n";
    }
}

sub
smawarn {
    warn("(sma): ", @_, "\n");
}

# This is the handler used by the XLI interface slave mode; warnings are 
# trapped inside an eval and then propagated manually.
sub
save_warning {
    die(@_);
}

sub
sux_find_base {
    my($form,$lemm) = @_;
    my $base = undef;
    my @bits = split(/-/,$form);
    my $cf = $lemm;
    $cf =~ s/\[.*$//;
    my $soundex = sux_soundex($cf);
    while ($#bits >= 0) {
	$base = join('-',@bits);
	my $norm1 = sux_norm1($base);
	print STDERR "sfb: $form => $base => $norm1 vs $soundex ... "
	    if $verbose;
	if ($norm1 =~ /^($soundex).?$/) {
	    unless ($bits[$#bits-1] =~ /[aeiu]$/
		    && $bits[$#bits] =~ /^[aeiu]/) {
		my $better_base = join('-',@bits[0..$#bits-1]);
		my $norm1 = sux_norm1($better_base);
		if ($norm1 =~ /^($soundex)$/) {
		    $base = $better_base;
		}
	    }
	    warn "ok\n" if $verbose;
	    last;
	} else {
	    warn "not\n" if $verbose;
	    pop @bits;
	    $base = undef;
	}
    }
    $base;
}

sub
sux_norm1 {
    my $tmp = shift;
    $tmp =~ tr/-.|//d;
    $tmp =~ s/\{.*?\}//g;
    1 while $tmp =~ s/\([^\(\)]+\)//g;
    $tmp =~ tr/[₀-₉ₓ\.]//d;
    $tmp = "\L$tmp";
    # careful: gemination reduction needs to come last
    $tmp =~ s/([a-z])\1/$1/g;
    $tmp;
}

sub
sux_soundex {
    my $tmp = shift;
    $tmp =~ tr/{}/\cA\cB/;
    $tmp =~ tr/'.//d;
    $tmp =~ tr/[₀-₉ₓ\.]//d;
    $tmp = "\L$tmp";
    $tmp =~ s/([a-z])\1/$1/g;
    $tmp =~ s/[aeiu]/[aeiu]/g;
    $tmp =~ s/([bdgŋhklmnprsštwz])$/$1?/g;
    $tmp =~ s/[sšz]/[sšz]/g;
    $tmp =~ s/[bp]/[bp]/g;
    $tmp =~ s/[dt]/[dt]/g;
    $tmp =~ s/n([gŋk])/$1/g;
    $tmp =~ s/([gŋk])/n?$1/g;
    $tmp =~ s/[gŋk]/[gŋk]/g;
    $tmp =~ s/[mn]/[mnŋ]/g;
    $tmp =~ s/\cA/\\{/g;
    $tmp =~ s/\cB/\\}/g;
    if ($tmp =~ /\[aeiu\]$/) {
	$tmp .= '?';
    } else {
	$tmp .= '[aeiu]?';
    }
    $tmp;
}

sub
nolemma {
    my $f = shift @_;
    my $novpr = strip_vpr(split(/-/,$f)) || '';
    warn "$f => $novpr\n";
}

1;

__END__

=head1 NAME

sma.plx -- Sumerian Morphological Analyzer

=head1 SYNOPSIS

sma.plx -project <PROJ> 

        -lemma <LEMM> -base <BASE> [-form FORM | FORMS | <STDIN>]

    |   -input <FILE>

    |   -xli -slave

=head1 OPTIONS

=over

=item B<-project PROJ>

Give the name of the project whose data files will be used when parsing.

=item B<-lemma LEMM>

Give the lemma (citation form/guide word, e.g., ar[praise]).

=item B<-base BASE>

Give the base to assume when parsing; optional.

=item B<-form FORM | FORMS | STDIN >

Forms may be given as an option, on the command line, or as line-by-line
input from STDIN.

Input is one tab-separated triple per line:

    FORM <TAB> LEMMA <TAB> BASE

BASE may be empty.

=item B<-input FILE>

Name a file containing input as for <STDIN> above.

=item B<-xli>

Give output in the form expected by atf2xtf's eXtended Lemmatization 
Interface (XLI).

=item B<-slave>

Run in slave mode; used by atf2xtf.

=back

=head1 DESCRIPTION

sma.plx is an interface to the PSD/PPCS morphological analyzer.

=head1 AUTHOR

Steve Tinney (stinney@sas.upenn.edu)

=head1 COPYRIGHT

Copyright(c) Steve Tinney 2008.

Released under the Gnu General Public License
(http://www.gnu.org/copyleft/gpl.html).
